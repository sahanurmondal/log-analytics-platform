[
  {
    "serial_no": 1,
    "question_number": 42,
    "title": "42. Identifying Problems in a Collaborative Document Editing System",
    "description": "You are asked to evaluate the design of a simplified Google Docs–like system where multiple users can edit the same document in real time. The current setup follows these rules:\nMultiple users should be able to work on the same document simultaneously.\nA single document is always handled by only one server.\nAssume the system has enough servers to handle all active documents.\nThe load balancer assigns a document to a server permanently using round robin strategy.\nQuestion: What problems can arise with this design?\nExample Scenarios to Consider:\nTwo popular documents with hundreds of active users get assigned to the same server.\nA server handling a document crashes while many users are editing.\nA lightly used document and a heavily used document both get the same server allocation because of round robin assignment.",
    "category": "System Design",
    "company": "Coinbase",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/identifying-problems-in-a-collaborative-document-editing-system/42",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Data Consistency",
      "Distributed System",
      "Load Balancer",
      "High Scalability",
      "Karat Round"
    ]
  },
  {
    "serial_no": 2,
    "question_number": 46,
    "title": "46. Design crypto exchange (Coinbase)",
    "description": "Design a system that will receive and execute orders for buying and selling cryptocurrency. Users of the system should be able to add orders for immediate execution, schedule orders, cancel orders and should receive notifications when scheduled orders get executed. Our system doesn’t execute the orders itself, but rather connects to multiple exchanges and picks the one which offers the best execution, based on price and latency. The service should be designed with an eye towards scalability and resilience. Orders could come in spikes of 100k’s, exchanges might go down without warning, anything could fail at any time.",
    "category": "System Design",
    "company": "Coinbase",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-crypto-exchange-coinbase/46",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Fault Tolerance",
      "Backend",
      "Microservices"
    ]
  },
  {
    "serial_no": 3,
    "question_number": 52,
    "title": "52. Design an E-Commerce Portal Like Amazon",
    "description": "Design an E-Commerce Portal Like Amazon.\nPossible follow-ups:\nSeller’s point of view.\nDeep discussion on transactions and locks while ordering and if we are short of inventory if payment fails/succeeds.\nOptimal delivery strategy.\nNotification sending and recommendation.\nScale: DAU - 1 million Total user - 1B",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-an-e-commerce-portal-like-amazon/52",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "High Scalability",
      "Transaction",
      "Online Transaction Processing (OLTP)",
      "E-Commerce"
    ]
  },
  {
    "serial_no": 4,
    "question_number": 54,
    "title": "54. Maximum stock price in last t minutes",
    "description": "I will be receiving some stock prices. I have a given windowsTime as well. Whenever a stock price is provided, I need to tell the maximum stock price seen in the last windowsTime seconds.\nHe asked to optimize and refactor a given code.\nThen he asked me for changes needed in the provided class based on Design principles.\nCICD pipeline changes.\nDistributed system challenges in the given code etc.",
    "category": "System Design",
    "company": "Salesforce",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/maximum-stock-price-in-last-t-minutes/54",
    "tags": []
  },
  {
    "serial_no": 5,
    "question_number": 55,
    "title": "55. High-Level Design: Library Management System | Book Lending | Library Book Checkout and Waitlist System",
    "description": "Design a software system for a physical book lending library. Users can browse and search a catalog. If a book is available a user can check out the book at the librarian. If the book is not available the user can join a waitlist. The system must support many concurrent users and avoid double checkouts of the same physical copy. The system should return the latest location and status of a copy and support a waitlist where the next eligible user is notified when a copy is returned.",
    "category": "System Design",
    "company": "Salesforce",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-library-management-system-book-lending-library-book-checkout-and-waitlist-system/55",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Concurrency",
      "Database Design",
      "Databases"
    ]
  },
  {
    "serial_no": 6,
    "question_number": 57,
    "title": "57. Optimal Storage Strategy",
    "description": "How to store 20B files for 5 years on a storage system like S3 optimally to select data on\nOrg id\nDeletion of files older than 5 years\nSelecting files for a particular date etc.\nUsed the simple logic of storing in orgid/year/month/day/files.",
    "category": "System Design",
    "company": "Salesforce",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/optimal-storage-strategy/57",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability"
    ]
  },
  {
    "serial_no": 7,
    "question_number": 66,
    "title": "66. Design facebook messenger",
    "description": "It should support one-on-one conversations between users. (media -audio, video and text)\nIt should keep track of the online/offline statuses of its users.\nIt should support the persistent and durable storage of chat history.\nIt should support Read receipts\nSystem should be highly consistent\nThere should be minimum latency while chatting\nScalable\nEnd-to-end encryption",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-facebook-messenger/66",
    "tags": []
  },
  {
    "serial_no": 8,
    "question_number": 69,
    "title": "69. Design CDN",
    "description": "Design CDN, and explain how the browser fetches the pages and all. How to update CDN if a file is updated.",
    "category": "System Design",
    "company": "Media.net",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-cdn/69",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Content Delivery Network (CDN)",
      "Caching"
    ]
  },
  {
    "serial_no": 9,
    "question_number": 84,
    "title": "84. Designing a Social Content Sharing Platform like Quora, Reddit, etc.",
    "description": "Design a social content sharing platform, similar to Reddit or Quora, where users can post, share, and engage in discussions on various topics. The platform should facilitate user interactions, support real-time updates, and efficiently handle a substantial user base, ensuring high availability, fault tolerance, and scalability.\nRequirements and Expectations:\nContent Creation and Sharing:\nUsers can post questions, answers, and comments on different topics.\nVoting and Ranking System:\nUsers can upvote or downvote content, contributing to its ranking and popularity.\nImplement a voting system that prevents abuse and ensures fairness.\nUser Interaction and Engagement:\nUsers can follow other users and receive notifications for new content from those they follow.\nAllow users to comment on posts, promoting discussions and community engagement.\nBackend Architecture and Scalability:\nDesign a scalable and distributed backend architecture to handle increasing user traffic.\nUtilize microservices for better maintainability and flexibility.\nData Storage and Database Schema:\nDesign a robust and efficient database schema to store user data, content, votes, and notifications.\nOptimize database queries for better performance.\nSome Follow -p questions:\nHow will you display search results?\nWill you keep separate DB or same DB for user info and QnA\nHow will auth/authorization work inside API gateway\nHow Authorization will work at separate services (Talk about passing auth tokens between the microservices)\nCassandra vs NOSQL vs RDBMS",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/designing-a-social-content-sharing-platform-like-quora-reddit-etc/84",
    "tags": [
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 10,
    "question_number": 168,
    "title": "168. Approach to building a client dashboard as a freelance web developer",
    "description": "You are a freelance web developer and a client from a food corporation wants a dashboard to manage seller data. Describe the steps you would take from the initial client briefing to delivering the final product. Include how you would gather requirements, plan the architecture, choose technologies, handle data, and ensure the dashboard meets the client’s needs.",
    "category": "System Design",
    "company": "SAP Labs",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/approach-to-building-a-client-dashboard-as-a-freelance-web-developer/168",
    "tags": [
      "Leadership",
      "Behavioral",
      "Situation Based"
    ]
  },
  {
    "serial_no": 11,
    "question_number": 195,
    "title": "195. High-Level Design: Registration System",
    "description": "You are asked to design the backend system for a registration platform that can be used for gaming tournaments, conferences, concerts, or other large-scale events. The system should allow participants to register, manage their registrations, and organizers to track capacity in real time.\nRequirements:\nUser Registration:\nA user should be able to create an account or use an existing account to register.\nA single user may register for multiple events.\nHandle cases where registrations might close when the event reaches maximum capacity.\nEvent Management:\nOrganizers should be able to create, update, and delete events.\nEach event has details such as name, date, venue (physical or virtual), and maximum participants.\nCapacity & Concurrency:\nThe system must prevent overbooking when multiple users attempt to register at the same time.\nHandle concurrency issues using locks, transactions, or queuing.\nNotifications:\nConfirmation emails or SMS should be sent to users after successful registration.\nWaitlisted users should be notified if a spot opens.\nPayment Integration (Optional Extension):\nSome events may require paid registration.\nSystem should integrate with a payment gateway and handle cases of failed or partial payments.\nScalability Requirements:\nSupport millions of users registering during peak hours (e.g., when tickets for a major game release).\nEnsure high availability and fault tolerance.\nReporting & Analytics:\nOrganizers should be able to track registrations, cancellations, and attendance trends.\nScale to Consider:\nTotal users: ~100M globally.\nPeak registrations: ~1M per minute during high-demand events.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-registration-system/195",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Databases",
      "Concurrency"
    ]
  },
  {
    "serial_no": 12,
    "question_number": 202,
    "title": "202. URL Shortner Service Like Tiny URL",
    "description": "Design the backend system for a TinyURL-like service that shortens long URLs into compact, easy-to-share links. When a user provides a long URL, the system generates a short URL that redirects to the original one.\nRequirements:\nCore Functionality:\nGiven a long URL, generate a unique short URL.\nWhen a short URL is accessed, it should redirect to the original long URL.\nSupport both custom aliases (if provided) and auto-generated short links.\nConstraints & Scale:\nAssume the service has 200M daily requests.\nShould be highly available and fault tolerant.\nShort URL should be unique and not collide.\nLinks should not expire unless explicitly set.\nNon-Functional Requirements:\nLow latency: Short URL redirection must be fast.\nHigh availability: System should work even if some servers are down.\nScalability: Should handle growing user base and billions of URLs.\nAnalytics (Optional): Track how many times each short URL is accessed.\nExample Flow:\nInput: https://www.amazon.com/some/very/long/product/url\nOutput: https://tiny.in/aZ93Kd\nUser clicks on tiny.in/aZ93Kd → Redirects to the Amazon product page.",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/url-shortner-service-like-tiny-url/202",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Databases",
      "Unique Key",
      "Distributed System",
      "High Scalability"
    ]
  },
  {
    "serial_no": 13,
    "question_number": 207,
    "title": "207. High-Level Design: Payment gateway design for e-commerce sites.",
    "description": "Design application like google pay where we can pay electricity bills and make recharges etc.\nProcedure to follow:-\nIdentify Actors.\nList down the use cases of all the actors.\nIdentify Entities based on step 2.\nDesign Entities.",
    "category": "System Design",
    "company": "Flipkart",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-payment-gateway-design-for-e-commerce-sites/207",
    "tags": [
      "System Design",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 14,
    "question_number": 212,
    "title": "212. High-Level Design: Design a Product-Agnostic Tagging System for Multiple Content Types",
    "description": "Atlassian has a number of different products, each containing different types of content. As an example, let’s look at three of our products:\nJira - Issues\nConfluence - Pages\nBitbucket - Pull requests\nWe want to build a system that allows users to tag content from different products, and then to view content by tags. A goal of this system is that it should be built in a product-agnostic way so that we could add new products in the future without a large amount of work. There are three key experiences that we want to build here:\nAs a user, I can add, remove, and update tags on content.\nAs a user, I can click on a tag and see all content that has been associated with that tag.\nAs a user, I can see a dashboard of popular tags.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-product-agnostic-tagging-system-for-multiple-content-types/212",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Distributed System",
      "API Design",
      "REST",
      "High Scalability",
      "High Availability",
      "Database Design",
      "Data Modelling",
      "Backend"
    ]
  },
  {
    "serial_no": 15,
    "question_number": 213,
    "title": "213. Design a Location Tracking Platform for Families | Kids Safety Application",
    "description": "You are asked to design the backend architecture of a location tracking platform where parents, guardians, or siblings can track their children in real-time. The system should allow users to:\nLive Tracking:\nContinuously track the live location of a child.\nShow updates with minimal latency on the guardian’s app.\nLocation History:\nStore past locations of the child for a given duration (start and end).\nAllow users to query and visualize the historical path taken.\nData Flow & Updates:\nThe child’s device should periodically send location updates.\nThe backend should efficiently handle high-frequency location updates (e.g., every few seconds).\nEnsure scalability as the number of devices grows (e.g., 10M+ DAU).\nAdditional Requirements (Optional, if time permits):\nAccess & Privacy Controls: Only authorized guardians should be able to access the child’s location.\nProvide an alert mechanism if a child enters or exits a specific zone (geofencing).\nScale to Consider:\nDaily Active Users: ~10M",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-location-tracking-platform-for-families-kids-safety-application/213",
    "tags": [
      "High-Level Design (HLD)",
      "Time Series",
      "System Design",
      "Real-Time Systems",
      "Databases"
    ]
  },
  {
    "serial_no": 16,
    "question_number": 224,
    "title": "224. Write SQL Query to Print The Highest Salary of Each Department From Employee Table",
    "description": "Write a SQL query to print the highest salary of each department in an employee table that contains employee details:\nthe department to which the employee belongs,\nand the salary of the employee.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/write-sql-query-to-print-the-highest-salary-of-each-department-from-employee-table/224",
    "tags": [
      "SQL",
      "SQL Query",
      "MySQL",
      "Database Design",
      "Databases",
      "Database Schema"
    ]
  },
  {
    "serial_no": 17,
    "question_number": 252,
    "title": "252. High-Level Design: Design A Chat Application like Facebook Messenger, WhatsApp, Slack, Discord, etc.",
    "description": "Required features (Functional Requirements):\nIt should support one-on-one conversations between users.\nIt should support group conversations between users.\nUser should recieve push notifications about any new messages if they are not online.\nOther requirements which can be asked:\nIt should support one-on-one conversations between users. (media -audio, video and text)\nIt should keep track of the online/offline statuses of its users.\nIt should support the persistent and durable storage of chat history.\nIt should support read receipts\nSupport sending attachments like image, videos etc.\nUser status - showing Online| Offline| Away| Private\nNot functional requirements:\nSystem should be highly consistent\nThere should be minimum latency while chatting\nScalability\nEnd-to-end encryption\nGlobal system",
    "category": "System Design",
    "company": "Media.net",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-chat-application-like-facebook-messenger-whatsapp-slack-discord-etc/252",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "High Availability",
      "High Scalability",
      "Low Latency",
      "Microservices"
    ]
  },
  {
    "serial_no": 18,
    "question_number": 272,
    "title": "272. Design Google Pay",
    "description": "Design a system similar to Google Pay. Google Pay is a mobile payment and digital wallet platform that allows users to make payments, send money, and store payment information securely.\nYour task is to design a high-level architecture for Google Pay, considering the following requirements:\nUser Registration and Authentication: Users should be able to register and authenticate themselves securely to access the Google Pay platform.\nPayment Methods: Users should be able to link multiple payment methods, such as credit cards, debit cards, and bank accounts, to their Google Pay account.\nMoney Transfer: Users should be able to send money to other users within the Google Pay ecosystem easily.\nPayment Integration: Google Pay should be integrated with various merchants and service providers to enable users to make payments for goods and services using the platform.\nSecurity: The system should ensure secure transmission and storage of user payment information, including encryption and tokenization mechanisms.\nTransaction History: Users should be able to view their transaction history, including details of payments made and received.\nNotifications: Users should receive real-time notifications for transaction updates, payment requests, and other relevant information.\nScalability and Performance: The system should be designed to handle a large user base and process transactions efficiently to provide a seamless experience.\nYour design should focus on the overall architecture, key components, and interactions between various modules of the system. You should also consider factors such as data storage, data synchronization, API integrations with banks and payment processors, and any other relevant aspects of a secure and robust payment platform.\nPlease provide a high-level overview of your design, along with any relevant diagrams, key interfaces, and considerations for scalability and performance.",
    "category": "System Design",
    "company": "Tata 1mg",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-google-pay/272",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "System Design",
      "Backend"
    ]
  },
  {
    "serial_no": 19,
    "question_number": 289,
    "title": "289. Design Snake Game",
    "description": "Design a Snake Game that provides the following functionalities:\nAn arena of N x N.\nThe snake does not move automatically; movement is based on user input.\nThe snake can move in all four directions.\nRandom food spawns; later, food might change to power food.\nWhen the snake eats food, its length increases, and a new food spawns.\nGame ends if the snake touches the wall or its own body.\nIf a new food spawns, it should be placed at a valid coordinate, avoiding the snake’s body.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-snake-game/289",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Object-Oriented Programming",
      "SOLID Principles",
      "Design Patterns"
    ]
  },
  {
    "serial_no": 20,
    "question_number": 302,
    "title": "302. Prints n Integers Using Separate Threads for Even and Odd Numbers",
    "description": "Design a multi-threaded solution that uses two separate threads to print the numbers from 1 to N. Each thread should be responsible for printing alternate numbers, with one thread printing odd numbers and the other thread printing even numbers. The threads should take turns printing their respective numbers, ensuring that the output is in the correct sequential order.\n1 (printed by OddThread)\n2 (printed by EvenThread)\n3 (printed by OddThread)\n4 (printed by EvenThread)\n5 (printed by OddThread)\n6 (printed by EvenThread)\n7 (printed by OddThread)\n8 (printed by EvenThread)\n9 (printed by OddThread)\n10 (printed by EvenThread)",
    "category": "System Design",
    "company": "MakeMyTrip",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/prints-n-integers-using-separate-threads-for-even-and-odd-numbers/302",
    "tags": [
      "Multi-Threaded Services",
      "Concurrency",
      "Low-Level Design (LLD)",
      "Java",
      "Backend",
      "System Design"
    ]
  },
  {
    "serial_no": 21,
    "question_number": 303,
    "title": "303. High-Level Design: Food Delivery App",
    "description": "Design food delivery apps like Zomato, Swiggy\nUser able to log in using mobile number and OTP\nSearch nearby restaurants and filter them\nPlace and cancel the order\nAble to track the delivery partner real-time\nGet notified on signup, order accepted, order picked for delivery, OTP\nExplain HLD + Schema Design + API structure and signature",
    "category": "System Design",
    "company": "Lendingkart",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-food-delivery-app/303",
    "tags": [
      "System Design",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 22,
    "question_number": 304,
    "title": "304. Behavioral Questions",
    "description": "Tell me about yourself.\nDescribe your day-to-day work and responsibilities.\nExplain the structure of your team and who you report to.\nHow does development work come to you? Is it through your manager or product team?\nAre you involved in making architectural decisions or participating in system design?\nIf another team has a dependency on your work and requires changes on a priority basis, but you are currently engaged with other high-priority tasks, how would you address this situation?\nHow do you handle conflicts that arise from multiple stakeholders?\nWalk me through the process you follow when you encounter a bug, providing a detailed explanation.\nIf you are unable to deliver a particular feature in the current sprint, but the product team insists on its delivery within the sprint, how would you approach and resolve this issue?\nProvide an explanation of microservices and their significance.\nDescribe the deployment process",
    "category": "System Design",
    "company": "Lendingkart",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/behavioral-questions/304",
    "tags": []
  },
  {
    "serial_no": 23,
    "question_number": 314,
    "title": "314. Design Bank Architecture",
    "description": "Design the architecture for a bank system using the basic principles of object-oriented programming. The bank system should be capable of managing customer accounts, facilitating transactions, and providing various banking services. The architecture should be modular, scalable, and maintainable, ensuring flexibility for future enhancements and modifications.\nThe following requirements should be considered in the design:\nCustomer Management: The system should allow the bank to manage customer information, including personal details, account details, and transaction history.\nAccount Management: The system should support different types of bank accounts, such as savings accounts, checking accounts, and fixed deposit accounts. Each account should have specific features and functionalities, such as balance management, interest calculation, and transaction recording.\nTransaction Processing: The system should enable customers to perform various banking transactions, such as deposits, withdrawals, fund transfers, and account inquiries. It should also ensure proper validation and authorization for each transaction.\nSecurity and Access Control: The system should implement robust security measures to protect customer data, prevent unauthorized access, and ensure privacy. It should include authentication mechanisms, user roles, and access control policies.\nReporting and Analytics: The system should provide reporting and analytical capabilities, allowing the bank to generate various financial reports, such as balance sheets, income statements, and customer transaction summaries.\nError Handling and Exception Management: The architecture should handle errors and exceptions gracefully, providing appropriate error messages and logging mechanisms for troubleshooting and debugging purposes.\nScalability and Extensibility: The design should be flexible and scalable to accommodate future growth and changes in the banking system. It should be able to handle an increasing number of customers, transactions, and new features without significant modifications to the core architecture.",
    "category": "System Design",
    "company": "VMware",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-bank-architecture/314",
    "tags": [
      "System Design",
      "Low-Level Design (LLD)"
    ]
  },
  {
    "serial_no": 24,
    "question_number": 329,
    "title": "329. Nearby Places Recommender System Like Yelp",
    "description": "Design a scalable Nearby Places Recommender System, similar to what platforms like Yelp, Google Maps, or Facebook Local offer. The system should help users discover relevant places (e.g., restaurants, cafes, salons, etc.) around their current or specified location.\nCore Functional Requirements:\nGiven a user’s location (latitude, longitude), return a list of nearby places.\nResults should be filtered and sorted by distance, ratings, categories, open hours, etc.\nUser should be able to search places by keyword or category.\nEach place should have metadata like name, address, coordinates, category, rating, and images.\nExtension\nSupport ranking based on personalization signals (user preferences, past visits, ratings).",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/nearby-places-recommender-system-like-yelp/329",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "Database Design",
      "API Design",
      "Data Modelling",
      "Distributed System",
      "Architecture",
      "Geo-Based System",
      "Geo-Spatial Indexing"
    ]
  },
  {
    "serial_no": 25,
    "question_number": 332,
    "title": "332. Distributing 6 Million Burgers in 10 Minutes | Flash Sale",
    "description": "Design a platform through which we can distribute 6 million burgers in 5 minutes. Consider more than 20 million requests will fall on our system. One user can receive one burger only, no more than that.\nFollow up: There are around 1 lakh coupons through which one user can get 1 extra burger along with the confirmed first burger.",
    "category": "System Design",
    "company": "Deliveroo",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/distributing-6-million-burgers-in-10-minutes-flash-sale/332",
    "tags": [
      "High Scalability",
      "High-Level Design (HLD)",
      "System Design",
      "Concurrency",
      "Locking"
    ]
  },
  {
    "serial_no": 26,
    "question_number": 338,
    "title": "338. Design Pastebin",
    "description": "Design a scalable and reliable system for a Pastebin-like web application that allows users to store and share snippets of text online. The system should be able to handle a large number of concurrent users and ensure the security and privacy of user pastes. The design should focus on the core functionalities of Pastebin while providing flexibility for future expansion.\nRequirements:\nPaste content: Clients should allow users to enter or paste content into a text box and submit it.\nStore Text: To guarantee data availability and durability, the system needs to store the text in a dependable and permanent way.\nCreate Unique URL: Following submission of the text, the system must create a special URL that may be used to view and distribute the paste.\nPaste and Share: The system must offer ways for users to quickly share the produced URL with others, such as via social media or direct links.\nView Paste: Users should be able to view the paste's content by going to the generated URL.\nExpiration: The system should enable adjustable paste expiration times, following which pastes should be automatically erased.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-pastebin/338",
    "tags": [
      "System Design",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 27,
    "question_number": 361,
    "title": "361. Top N Products from Streaming Data",
    "description": "Design a system that can handle a large volume of incoming product data in a streaming manner. The system should be capable of efficiently finding the top N products based on their popularity for any given day. Additionally, you should extend the system to find the top N products in the last 1 hour based on the minute-by-minute streaming data.\nRequirements:\nStreamline the handling of millions of products in real time.\nGive users the option to search for the top N products for any given day based on how frequently those products appear throughout that day.\nUsing the minute-by-minute streaming data, expand the system to determine the top N products for the previous 1 hour.\nThe system must be scalable and effective in order to handle growing data volumes and provide real-time query responses.",
    "category": "System Design",
    "company": "Myntra",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/top-n-products-from-streaming-data/361",
    "tags": [
      "System Design",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 28,
    "question_number": 362,
    "title": "362. Design a search system for IRCTC",
    "description": "Create a search mechanism that enables customers to look for and purchase train tickets for IRCTC (Indian Railway Catering and Tourism Corporation). The system must effectively support numerous concurrent users and deliver quick and precise search results in response to user inquiries on train availability, routes, and ticketing.\nRequirement:\nTrain Availability Search:\nUsers should be able to search for train availability between two stations for a given date and time. The system should display a list of available trains with their respective schedules and availability status.\nRoute Information:\nProvide information on train routes, including all the intermediate stations, distances, and timings for a specific train.\nTicket Booking:\nAllow users to book train tickets, providing options for different classes and berth preferences. Handle multiple bookings simultaneously while ensuring data consistency and avoiding conflicts.\nUser Authentication and Authorization:\nImplement a secure user authentication and authorization system to protect sensitive user information and prevent unauthorized access. Concurrency and Scalability:\nReal-time Updates:\nKeep the train availability and booking information up-to-date in real-time to avoid discrepancies. Performance and Latency: Ensure low latency and high performance in query processing and ticket booking to provide a smooth user experience.",
    "category": "System Design",
    "company": "Myntra",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-search-system-for-irctc/362",
    "tags": [
      "System Design",
      "Low-Level Design (LLD)"
    ]
  },
  {
    "serial_no": 29,
    "question_number": 364,
    "title": "364. Distributed API Rate Limiter",
    "description": "Create a distributed API rate limiter system that regulates and restricts the volume of incoming requests to a group of APIs from numerous clients.\nRequirements:\n1- Rate Limiting:\nImplement rate limiting to restrict the number of requests each client can make to the APIs within a specific time window (e.g., X requests per Y seconds).\n2- Distributed and Scalable:\nDesign a distributed system to handle rate limiting across multiple servers/nodes to accommodate high request volumes and distribute the load.\n3- Efficient and Low Latency:\nThe rate limiting process should be efficient and have low latency to minimize the impact on the API response time.\n4- Dynamic Adjustment:\nProvide the capability to dynamically adjust rate limits for specific clients or APIs without system restarts.\n5- Fairness and Prioritization:\nDesign the system to ensure fairness among different clients, preventing a single client from monopolizing the resources. Support prioritization for critical clients or APIs if needed.\n5- Metrics and Monitoring:\nImplement metrics and monitoring to track the rate of incoming requests, the number of requests allowed, and any violations. Resilience and Fault Tolerance:",
    "category": "System Design",
    "company": "Myntra",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/distributed-api-rate-limiter/364",
    "tags": [
      "System Design",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 30,
    "question_number": 405,
    "title": "405. Design ATM System",
    "description": "Design the low-level software architecture for an Automated Teller Machine (ATM) system. The ATM system should allow users to perform various banking transactions securely and efficiently.\nNote: 1 : Write down all Entities and Interface and make use of OOPs Concepts like abstraction, Encapsulation, etc 2 : Use of Design patterns is important to showcase your skill.\nFeatures:\n1- User Authentication: The ATM should support user authentication using a Personal Identification Number (PIN).\n2- Account Information: The ATM should display the account balance and account details.\n3- Cash Withdrawal: The system should allow user to withdraw cash and also validates the withdrawal amount against the account balance and ensure that the user does not exceed their available balance\n4- Cash Deposit : The system should validate the deposited amount and update the account balance accordingly.\n5- Fund Transfer: Money transfers between user accounts or to other accounts held by the same bank should be possible. Before completing the transfer, the system should check the sender's account balance and make sure there are enough funds.\n6- Transaction History: The ATM should provide users to view their recent transaction history for last 15 days.\n7- Error Handling: Implement proper error handling for scenarios\n8- Language Support: The ATM should support multiple languages for the user interface\n9- Receipts: The ATM should provide printed or digital receipts for all successful transactions, including details like transaction amount, date, and account balance.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-atm-system/405",
    "tags": [
      "System Design",
      "Low-Level Design (LLD)"
    ]
  },
  {
    "serial_no": 31,
    "question_number": 406,
    "title": "406. Auction System",
    "description": "Design an Auction System",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/auction-system/406",
    "tags": [
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 32,
    "question_number": 410,
    "title": "410. Music Streaming Application",
    "description": "Design a music streaming application which fetches top trending songs. The application should provide a seamless and enjoyable user experience, supporting various features such as search, recommendations, playlists. It should be scalable, reliable, and responsive to accommodate a large number of concurrent users and handle peak loads efficiently.\nRequirements:\nFind trending songs based on regions.\nScalable and fault tolerance to handle millions of requests from the clients and handle peak loads efficiently.\nMusic Library to maintain an extensive and diverse collection of songs, albums, and artists from various genres. Songs should have associated metadata like title, artist, album, genre, and release date.\nSearch and Discovery so that user is able to search for songs, artists, and albums efficiently.\nMusic Playback to provide smooth music playback with features like play, pause, skip, volume control, and progress tracking. It should support streaming audio at different bit rates based on user network conditions.\nFollow ups:\nDesign the data schema of the same\nChoices of DB to use.",
    "category": "System Design",
    "company": "Agoda",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/music-streaming-application/410",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 33,
    "question_number": 414,
    "title": "414. IRCTC Ticket Booking Database Design",
    "description": "Design a database for the Indian Railway Catering and Tourism Corporation (IRCTC) to manage ticket bookings, train information, passenger details, and other relevant data.\nThe database should include the following entities:\nTrain: Store information about each train, including train number, name, source station, destination station, departure time, arrival time, and the number of available seats in each class (sleeper, AC 3-tier, AC 2-tier, etc.).\nStation: Maintain details of each station, including station code, station name, and the city it belongs to.\nPassenger: Keep track of passenger details, such as passenger name, age, gender, contact information, and a unique passenger ID.\nTicket: Record information about each ticket booked, including the ticket ID, passenger ID, train number, class of travel, booking date, and status (confirmed, waitlisted, or cancelled).\nBooking: Store the details of each booking transaction, including booking ID, total fare, payment status, booking date, and the number of passengers.\nEnsure proper relationships and constraints between these entities to maintain data integrity and consistency.\nNote:\nAssume that each train operates on a specific route and does not have intermediate stops.\nConsider the different classes of travel available on the trains (e.g., Sleeper, AC 3-tier, AC 2-tier) and their respective fares.",
    "category": "System Design",
    "company": "Dunzo",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/irctc-ticket-booking-database-design/414",
    "tags": [
      "Database Design",
      "SQL",
      "Databases",
      "Data Modelling"
    ]
  },
  {
    "serial_no": 34,
    "question_number": 415,
    "title": "415. Leaderboard System for a Fantasy Sports Platform like Dream11 - High-Level Design",
    "description": "Design a basic leaderboard system for the Dream11 app, a fantasy sports platform, to track and display the ranking of users based on their performance in various sports contests.",
    "category": "System Design",
    "company": "Dunzo",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/leaderboard-system-for-a-fantasy-sports-platform-like-dream11-high-level-design/415",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Leaderboard System",
      "Scoring System"
    ]
  },
  {
    "serial_no": 35,
    "question_number": 426,
    "title": "426. High-Level Design: Instagram-like System",
    "description": "Problem Statement: Design an Instagram-like System\nYou are tasked with designing a social media platform like Instagram, where users can share posts, follow other users, and view a personalized feed.\nYou need to implement the following core functionalities:\nCreate a post from a mobile device (photo/video upload with captions).\nGenerate a feed containing posts from followed users.\nFollow/unfollow users to customize the feed experience.\nThe system should handle millions of users and posts efficiently.",
    "category": "System Design",
    "company": "Freshworks",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-instagram-like-system/426",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 36,
    "question_number": 429,
    "title": "429. Deep Dive on Kafka Architecture",
    "description": "As a software architect tasked with designing a robust and scalable data processing and storage system, you are required to provide an in-depth analysis of various critical components. Your analysis should cover Kafka's architecture, strategies to handle failure scenarios, techniques for database partitioning, and the concept of sharding in databases. Your insights will serve as a foundation for creating a reliable and high-performance system.\nPart 1: Kafka Architecture Analysis Explain the architecture of Apache Kafka, highlighting its core components, such as producers, brokers, topics, partitions, consumers, and ZooKeeper. Provide a detailed description of how data flows through the Kafka ecosystem, including the publish-subscribe mechanism and data retention policies. Diagrams can be used to illustrate the interactions between components.\nPart 2: Handling Failure Scenarios in Kafka Discuss various failure scenarios that can occur within a Kafka cluster, such as broker failures, network partitions, and data inconsistencies. Describe strategies to handle these failures, including replica placement, leader election, and data recovery. Elaborate on how ZooKeeper contributes to maintaining cluster stability.",
    "category": "System Design",
    "company": "Paytm",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/deep-dive-on-kafka-architecture/429",
    "tags": [
      "Kafka",
      "Distributed System",
      "Architecture",
      "System Design"
    ]
  },
  {
    "serial_no": 37,
    "question_number": 447,
    "title": "447. Benefits / Features / USPs of Redis",
    "description": "Benefits / Features / USPs of Redis",
    "category": "System Design",
    "company": "Adobe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/benefits-features-usps-of-redis/447",
    "tags": [
      "Redis",
      "High-Level Design (HLD)",
      "High Scalability",
      "Distributed System"
    ]
  },
  {
    "serial_no": 38,
    "question_number": 505,
    "title": "505. Design Reels System",
    "description": "You are tasked with designing a system for managing and displaying reels. Reels are collections of media content, often in the form of images or videos, that are organized and presented in a user-friendly and visually appealing manner. The purpose of this system is to allow users to create, manage, and view reels, which can be used for various applications such as storytelling, marketing, or portfolio showcasing.",
    "category": "System Design",
    "company": "Meta",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-reels-system/505",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Media Content Management"
    ]
  },
  {
    "serial_no": 39,
    "question_number": 554,
    "title": "554. High-Level Design: User Post Feed Like Twitter/Facebook",
    "description": "Design backend architecture of an application like twitter or facebook where:\nA user can add new posts/tweets.\nA user can see his/her feed which will show the list of posts/tweets from users they follow.",
    "category": "System Design",
    "company": "Swiggy",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-user-post-feed-like-twitter-facebook/554",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "System Design",
      "Distributed systems/architecture"
    ]
  },
  {
    "serial_no": 40,
    "question_number": 592,
    "title": "592. Reminder Service System Design",
    "description": "Design a Reminder Service that allows different servers to set reminders by providing a time duration in seconds. The system should notify the server when the specified time has elapsed.\nRequirements:\nInput:\nThe system should accept requests from different servers, each specifying a time duration for the reminder in seconds.\nTimer Management:\nThe system needs to manage timers for each reminder and trigger notifications when the specified time has elapsed.\nNotification:\nOnce the time has elapsed, the system should notify the respective server about the reminder.\nScalability:\nThe design should be scalable to handle a large number of reminder requests from multiple servers simultaneously.\nFault Tolerance:\nThe system should be robust and handle failures gracefully, ensuring that reminders are not lost even in the case of server or network failures.\nPersistence:\nOptionally, the system can persist reminders to ensure that reminders are not lost even if the system restarts.\nExample Scenario:\nServer A sends a request to set a reminder for 300 seconds.\nThe Reminder Service creates a distributed timer for 300 seconds.\nAfter 300 seconds, the service notifies Server A about the reminder.",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/reminder-service-system-design/592",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "High Scalability",
      "High Availability",
      "Microservices"
    ]
  },
  {
    "serial_no": 41,
    "question_number": 628,
    "title": "628. Design Stock Price Alerting System",
    "description": "The goal is to design and implement a stock price alerting system that allows users to set personalized alerts based on stock price thresholds or percentage changes. The system should fetch real-time or periodic stock price data, process it, and notify users or take some action based on configuration like triggering stop loss order.",
    "category": "System Design",
    "company": "Uber",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-stock-price-alerting-system/628",
    "tags": [
      "High Scalability",
      "High-Level Design (HLD)",
      "High Availability",
      "System Design",
      "Architecture",
      "Backend"
    ]
  },
  {
    "serial_no": 42,
    "question_number": 630,
    "title": "630. Concurrent Series Printing",
    "description": "Design a concurrent program that prints a series of numbers in the form \"0102030405...\" up to a given positive integer 'n'. Three separate threads are employed, each responsible for printing 0, even numbers, and odd numbers. The goal is to synchronize the threads such that the output displays the series in the correct order with alternating 0s, even, and odd numbers.",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/concurrent-series-printing/630",
    "tags": [
      "Multi-Threaded Services",
      "Multithreading",
      "Concurrency",
      "Synchronized",
      "Threads",
      "Java",
      "Low-Level Design (LLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 43,
    "question_number": 634,
    "title": "634. Low-Level Design: Search Filter For Ecommerce Platform",
    "description": "Design a system to support the filtering of products for an e-commerce platform.",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/low-level-design-search-filter-for-ecommerce-platform/634",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "OOPS"
    ]
  },
  {
    "serial_no": 44,
    "question_number": 640,
    "title": "640. High-Level Design: Design Donation Service",
    "description": "3-day charity event where huge participation of more than 3 million customers are expected to participate and simply donate money\nYour app simply accepts certain details like customer name, email address, credit/payment method details. You can assume the company already has partnered with a payment gateway to store the money collected from events and transfer them back later.\nSome follow-up questions which can be asked:\nHow to stop service when reaching the limitation (assume the limitation is 10M)?\nHow to handle database connection failures\nHow different companies can use this product if they don't want to share data\nHow to prevent double payment",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-donation-service/640",
    "tags": [
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 45,
    "question_number": 641,
    "title": "641. High Level Design: Tok K Songs",
    "description": "Design a system to give top k songs to be shown to the user.",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-tok-k-songs/641",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "System Design",
      "Distributed System"
    ]
  },
  {
    "serial_no": 46,
    "question_number": 642,
    "title": "642. 3-day charity event",
    "description": "3-day charity event where huge participation of more than 3 million customers are expected to participate and simply donate money\nYour app simply accepts certain details like customer name, email address, credit/payment method details. You can assume the company already has partnered with a payment gateway to store the money collected from events, and transfer them back later.\nQuestions which can be asked:\nHow to stop service when reaching the limitation (assume the limitation is 10M)?\nExplain the Write Ahead Log\nHow to handle database connection failures\nHow different companies can use this product if they don't want to share data\nHow to prevent double payment",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/3-day-charity-event/642",
    "tags": [
      "System Design"
    ]
  },
  {
    "serial_no": 47,
    "question_number": 650,
    "title": "650. High-Level Design: Design a Pastebin System",
    "description": "Pastebin services allow users to upload and share text online easily, providing a simple way to share large text snippets or code logs without the constraints of email or messaging platform limits.\nDesign a high-level architecture for a Pastebin-like service. The system should allow users to paste text snippets, optionally set an expiration time after which the paste will be deleted, and generate a unique URL for each uploaded snippet that users can share.\nRequirements:\nPaste Creation: Users should be able to submit text snippets to the system. Each snippet may have an optional expiration time (e.g., 10 minutes, 1 hour, never expires).\nURL Generation: Upon submitting a snippet, the system should generate a unique URL that users can share with others to access the uploaded text.\nSnippet Expiration: If a user sets an expiration time, the snippet should be automatically deleted from the system after reaching its expiration time.\nHigh Availability and Reliability: The service should be highly available and reliable, ensuring that users can access and upload snippets at any time.\nScalability: The system should be able to scale to support a high number of submissions and accesses.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-pastebin-system/650",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 48,
    "question_number": 671,
    "title": "671. High-Level Design: Designing a Scalable System for Handling High-Demand Item Sales",
    "description": "In today's digital age, flash sales and limited-time offers have become a common strategy for retailers to generate excitement and drive purchases. These events, especially when involving highly sought-after items in limited quantities, can lead to a significant spike in website traffic and transaction volume within a very short period.\nYour task is to design a robust, scalable system capable of handling an item sale event that starts at midnight, where the item is available in limited quantity. The system should be able to manage high traffic, process transactions efficiently, and ensure a fair purchasing process while maintaining high availability and consistency. Consider aspects such as inventory management, load balancing, database design, and fault tolerance in your design.",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/high-level-design-designing-a-scalable-system-for-handling-high-demand-item-sales/671",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "Reliability",
      "E-Commerce",
      "Inventory Management"
    ]
  },
  {
    "serial_no": 49,
    "question_number": 695,
    "title": "695. High-Level Design: Order History System Design",
    "description": "Design a system that allows users interact with their order history on an e-commerce platform.\nThis system must allow users to seamlessly view summaries of their past orders, including details such as OrderId, Amount, and a List of Items. It should empower users with the ability to click on any OrderId to reveal an in-depth price breakdown for each item in the order.\nTo augment user experience, incorporate a robust search functionality for users to easily find orders containing specific items, alongside a time-based filter to streamline their search.\nThe system must prioritize scalability, and performance to handle a large amount of data.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/high-level-design-order-history-system-design/695",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Availability",
      "High Scalability"
    ]
  },
  {
    "serial_no": 50,
    "question_number": 699,
    "title": "699. High-Level Design: Design an Advanced Employee Expense Reimbursement Tool",
    "description": "Your task is to design a comprehensive system similar to SAP Concur, focused on managing and processing employee expense reimbursements within a corporate setting. The system should allow employees to submit expenses seamlessly, complete with digital receipts, and categorize them according to the nature of the expense (e.g., travel, meals, accommodation, office supplies). The submitted expenses should then be routed through an automated approval workflow that involves the employee's manager and potentially other stakeholders for verification and approval.\nThe system must facilitate a smooth and transparent communication channel between employees, their managers, and the finance team. Managers should be able to review, approve, or reject expense submissions with reasons for their decision. The finance team, on the other hand, needs to process approved expenses for reimbursement, ensuring compliance with company policies and external regulations.",
    "category": "System Design",
    "company": "Nutanix",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-an-advanced-employee-expense-reimbursement-tool/699",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "API Design",
      "Database Design"
    ]
  },
  {
    "serial_no": 51,
    "question_number": 700,
    "title": "700. Low-Level Design: Unified Bookmark Management System (UBMS)",
    "description": "Design a low-level system that consolidates and manages all the bookmarks a user creates across different web browsers on their laptop. Users often work with multiple browsers and create bookmarks in each one separately, which can lead to difficulties in managing and accessing these bookmarks efficiently.\nYour system, the Unified Bookmark Management System (UBMS), should provide a centralized platform where users can view, add, delete, and organize bookmarks from various browsers in one place.\nThe UBMS should support basic functionalities such as adding a new bookmark, deleting an existing bookmark, updating bookmark details (e.g., URL, name), categorizing bookmarks into folders, and searching for bookmarks.",
    "category": "System Design",
    "company": "Nutanix",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/low-level-design-unified-bookmark-management-system-ubms/700",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 52,
    "question_number": 703,
    "title": "703. High-Level Design: Design a Stock Trading Platform Like Zerodha",
    "description": "The objective is to design a high-level architecture for an online stock trading platform similar to Zerodha, which is one of the leading technology-driven stock trading platforms. This system should enable users to buy and sell stocks in real-time, view live market data",
    "category": "System Design",
    "company": "Expedia Group",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-stock-trading-platform-like-zerodha/703",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Availability",
      "High Scalability"
    ]
  },
  {
    "serial_no": 53,
    "question_number": 705,
    "title": "705. High-Level Design: Design Video's View Count Service for YouTube/Netflix/Instagram",
    "description": "Design a system which can give total, monthly weekly views on a video to show on creator's dashboard.",
    "category": "System Design",
    "company": "Uber",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-video-s-view-count-service-for-youtube-netflix-instagram/705",
    "tags": [
      "High Scalability",
      "High Availability",
      "High-Level Design (HLD)",
      "System Design",
      "Backend"
    ]
  },
  {
    "serial_no": 54,
    "question_number": 706,
    "title": "706. High-Level Design: Design a Logging System",
    "description": "Design a high-level architecture for a scalable, reliable, and efficient logging system that can be used by various applications and services within an organization. This system should be capable of handling high volumes of log messages with minimal latency and should provide mechanisms for log aggregation, storage, analysis, and search functionalities.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-logging-system/706",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "Backend"
    ]
  },
  {
    "serial_no": 55,
    "question_number": 708,
    "title": "708. High-Level Design: Asynchronous Telecom Recharge System Design",
    "description": "Design the architecture of a system that handles telecom recharges, specifically focusing on the asynchronous nature of transactions between Your System and telecom providers like Airtel.\nWhen a customer initiates a recharge, the platform doesn't directly recharge the balance but instead sends a request to the telecom provider (e.g., Airtel), which then processes the recharge independently. This process is asynchronous and might involve significant delays and multiple hops before completion. The primary challenge is to design a system that gracefully manages these asynchronous transactions, including mechanisms to periodically check the status of each recharge request until it's confirmed to be successful or fails.",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-asynchronous-telecom-recharge-system-design/708",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "Backend",
      "Kafka",
      "Database Design",
      "Microservices"
    ]
  },
  {
    "serial_no": 56,
    "question_number": 720,
    "title": "720. High-Level Design: Design Web Crawler",
    "description": "A web crawler that parses over 1B+ web pages.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-web-crawler/720",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 57,
    "question_number": 733,
    "title": "733. Designing a Feature Flag Management System",
    "description": "The task involves designing a backend architecture for a feature flag management system that allows the dynamic enabling or disabling of features in an existing system without requiring deployments or code changes.\nThis system should support adding new features or controlling existing ones based on feature flags, providing the capability to roll out or roll back features quickly, conduct A/B testing, and customize user experiences.",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/designing-a-feature-flag-management-system/733",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "System Design",
      "Backend",
      "Microservices"
    ]
  },
  {
    "serial_no": 58,
    "question_number": 776,
    "title": "776. AWS concepts like DNS, ALB, NLB, TG, ECS, EC2",
    "description": "Questions around AWS concepts like DNS, ALB, NLB, TG, ECS, EC2",
    "category": "System Design",
    "company": "Kotak Mahindra Bank",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/aws-concepts-like-dns-alb-nlb-tg-ecs-ec2/776",
    "tags": [
      "System Design",
      "AWS"
    ]
  },
  {
    "serial_no": 59,
    "question_number": 786,
    "title": "786. High-Level Design: Geo-Based Offline Meeting Scheduler",
    "description": "Develop a system that schedules offline meetings within a city and notifies participants to leave based on the estimated travel time from their current location to the meeting location. The system should factor in real-time traffic conditions to provide accurate departure alerts. The primary goal is to ensure that all participants arrive at the meeting location on time. The system should support scheduling meetings, adding participants with their current locations, and integrating with a map service for traffic and route calculations.\nFunctional Requirements:\nMeeting Scheduling: Users should be able to schedule a meeting by specifying the date, time, and location within the city.\nParticipant Management: The organizer can add participants to the meeting by specifying their email addresses or user IDs. Participants can view meetings they’ve been added to.\nLocation Tracking: The system should be able to fetch the current location of the participants if they have given the app permission.\nTravel Time Estimation: Leverage a mapping service (e.g., Google Maps API) to calculate the estimated travel time to the meeting location from the participant's current location, considering the current traffic conditions.\nNotification: Send notifications to participants, advising them when to leave for the meeting based on the estimated travel time.\nNon-functional Requirements:\nScalability: The system should be scalable to support a large number of concurrent meetings and participants.\nReliability: Notifications and time estimations should be accurate and delivered in real-time to avoid delays.\nIntegration: Easily integrate with external map and traffic data services.",
    "category": "System Design",
    "company": "Apollo.io",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/high-level-design-geo-based-offline-meeting-scheduler/786",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "Geo-Based System",
      "Real-Time Systems",
      "Notification System",
      "Location Tracking"
    ]
  },
  {
    "serial_no": 60,
    "question_number": 819,
    "title": "819. High-Level Design: Design a synchronisation mechanism for Kindle",
    "description": "Design a system to synchronize the reading progress of users across multiple devices. This system should ensure that when a user stops reading a book on one device and later opens the same book on another device, they can continue reading from the same page.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-synchronisation-mechanism-for-kindle/819",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "System Design",
      "Real-Time Systems"
    ]
  },
  {
    "serial_no": 61,
    "question_number": 844,
    "title": "844. Word Search Engine For Documents",
    "description": "Implement a Word Search Engine, given a list of documents with text, return the document ids that the given word belongs in.\nFollowup: Search a phrase",
    "category": "System Design",
    "company": "Confluent",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/word-search-engine-for-documents/844",
    "tags": [
      "System Design"
    ]
  },
  {
    "serial_no": 62,
    "question_number": 851,
    "title": "851. High-Level Design: Design a Cryptocurrency Dashboard System",
    "description": "Design a system for a cryptocurrency dashboard that provides real-time tracking of various cryptocurrencies. The dashboard should allow users to view current prices, historical data, and trends for multiple cryptocurrencies. It should also support notifications for price changes and provide analytics like volume changes, market cap variations, and percentage increases.\nThe system should be capable of handling high traffic and ensure low latency updates. Additionally, it must be scalable to accommodate the addition of new cryptocurrencies and increased user load.",
    "category": "System Design",
    "company": "Gemini",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-a-cryptocurrency-dashboard-system/851",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 63,
    "question_number": 863,
    "title": "863. Convert a Monolithic shopping application to Microservices-based",
    "description": "Convert a Monolithic shopping application to Microservices-based",
    "category": "System Design",
    "company": "JPMorgan Chase & Co.",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/convert-a-monolithic-shopping-application-to-microservices-based/863",
    "tags": [
      "Microservices",
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 64,
    "question_number": 870,
    "title": "870. High-Level Design: Design Like Service For Viral Celebrities Posts",
    "description": "Design a scalable system to handle and store the likes count for viral posts by celebrities on a social media platform. The system should efficiently manage a rapidly increasing likes count, often in the millions, while ensuring accurate real-time data updates.\nConsider challenges such as high read and write load, data consistency, and potential bottlenecks. Your design should also address aspects such as caching strategies, database choices, and potential use of distributed systems to handle the load.",
    "category": "System Design",
    "company": "Wayfair",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-like-service-for-viral-celebrities-posts/870",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Like Service",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 65,
    "question_number": 883,
    "title": "883. High-Level Design: Design Google Calendar",
    "description": "Design a simplified version of Google Calendar, a widely used calendar service that allows users to schedule events, create reminders, and manage their time effectively. The system should support basic functionalities such as adding, updating, and deleting events. It should also handle overlapping events and provide views for daily, weekly, and monthly schedules.",
    "category": "System Design",
    "company": "Salesforce",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-google-calendar/883",
    "tags": [
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 66,
    "question_number": 890,
    "title": "890. Where will you use a NoSQL DB and Why?",
    "description": "Where will you use a NoSQL DB and Why?",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/where-will-you-use-a-nosql-db-and-why/890",
    "tags": [
      "NoSQL",
      "Database Design",
      "Databases",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 67,
    "question_number": 891,
    "title": "891. What is SAGA Pattern in Microservices and How is it useful?",
    "description": "What is SAGA Pattern in Microservices and How is it useful?",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/what-is-saga-pattern-in-microservices-and-how-is-it-useful/891",
    "tags": [
      "Microservices",
      "High-Level Design (HLD)",
      "SAGA Pattern"
    ]
  },
  {
    "serial_no": 68,
    "question_number": 892,
    "title": "892. Design Elastic search",
    "description": "Design Elastic Search. How would you scale and guarantee fault tolerance?\nFollow up: How to search for words that are the most important in the data stream",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-elastic-search/892",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Elastic Search",
      "Searching",
      "Lucene"
    ]
  },
  {
    "serial_no": 69,
    "question_number": 895,
    "title": "895. SQL vs NoSQL",
    "description": "Explain differences between SQL and NoSQL databases. When will you use each and why?",
    "category": "System Design",
    "company": "Jar",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/sql-vs-nosql/895",
    "tags": [
      "Databases",
      "Database Design",
      "NoSQL",
      "SQL",
      "MongoDB",
      "MySQL"
    ]
  },
  {
    "serial_no": 70,
    "question_number": 901,
    "title": "901. ACID Properties in Databases",
    "description": "What do ACID properties (Atomicity, Consistency, Isolation, Durability) mean in the context of transactions?\nWhy are they important?\nWhat issues might arise if one of these properties is not guaranteed?",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/acid-properties-in-databases/901",
    "tags": [
      "ACID",
      "SQL",
      "Relational Databases (RDBMS)",
      "Databases",
      "Database Design",
      "Transaction",
      "Data Consistency"
    ]
  },
  {
    "serial_no": 71,
    "question_number": 986,
    "title": "986. High-Level Design: Flights Tracking Subscription System",
    "description": "There's a million active users actively tracking flights users come to your site and select some flight routes they want to track. you have to notify them within ten minutes if there's a significant discount you just gotta keep hitting expedia/kayak to get latest prices and figure out if the price changed and save the history yourself you are given an oracle the ML team provides which, if you give it a price history, will tell you if the latest price is a notification worthy discount there's 70k air routes between cities in the world, and some multiple of this airline lines. t= 12:30 (orice change) ..... t=12:40 (user receives notification) user: start_aiport, dest_airport, date",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-flights-tracking-subscription-system/986",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Notification System",
      "Subscription System",
      "Amazon"
    ]
  },
  {
    "serial_no": 72,
    "question_number": 1030,
    "title": "1030. High-Level Design for Home Page of Hotstar",
    "description": "High-Level Design for Home Page of Hotstar",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-for-home-page-of-hotstar/1030",
    "tags": [
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 73,
    "question_number": 1063,
    "title": "1063. High-Level Design: Account Inactivity Manager",
    "description": "Design an Account Inactivity Manager which based on user activity deactivates the user account and performs a list of actions as configured by the user.",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-account-inactivity-manager/1063",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "System Design"
    ]
  },
  {
    "serial_no": 74,
    "question_number": 1064,
    "title": "1064. High-Level Design: Retargeting System via Notification for an E-Commerce Website",
    "description": "Retargeting System via Notification for an e-commerce website (push notification)\nRequirements:\nCreate some state machines based on which a notification should be able to dispatch\nEg: login -> view an item -> adds the item to cart -> drops off\nRequirement can be after 30 min if the person doesn’t purchase the item, send him a notification with some pre-defined template.\nThere should be an exit condition for each state machine.\nYou should not overwhelm the customer with a lot of notifications\nThis system should be self-serve and any analytics folk can come and create his state-machine for re-targetting the customers",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-retargeting-system-via-notification-for-an-e-commerce-website/1064",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "E-Commerce"
    ]
  },
  {
    "serial_no": 75,
    "question_number": 1114,
    "title": "1114. Low-Level Design: Calendar Application like Google Calendar",
    "description": "Design a calendar Application (similar like Google Calendar)\nAbility to create, update, delete an Event\nAn event would typically consist of {start, end, location, Owner, user-list, title}.\nEvents can either be like meetings(with a dedicated location and appropriate guest-list) or as well be like holidays, birthdays, reminders etc.\nAn event once created, can be either accepted or rejected by the constituent users - if neither it should be in neutral state.\nGet Calendar for a user Ui\nGet Event details.\nFor a given set of users[U1, U2,....Un] identity a common free slot of time.",
    "category": "System Design",
    "company": "super.money",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/low-level-design-calendar-application-like-google-calendar/1114",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Class Design",
      "Design Patterns",
      "SOLID"
    ]
  },
  {
    "serial_no": 76,
    "question_number": 1115,
    "title": "1115. Shazam App - Music / Song Identifying App",
    "description": "Shazam App - Music / Song Identifying App",
    "category": "System Design",
    "company": "Wayfair",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/shazam-app-music-song-identifying-app/1115",
    "tags": [
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 77,
    "question_number": 1176,
    "title": "1176. Design Database Schema for Online Book Reader like Kindle",
    "description": "Design DB schema for an online book reading application like Kindle.",
    "category": "System Design",
    "company": "Zepto",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-database-schema-for-online-book-reader-like-kindle/1176",
    "tags": [
      "Database Design",
      "Database Schema",
      "Low-Level Design (LLD)",
      "System Design",
      "Backend"
    ]
  },
  {
    "serial_no": 78,
    "question_number": 1177,
    "title": "1177. High Level Design: Streaming service similar to Twitch",
    "description": "Design a high-level architecture for a live-streaming platform similar to Twitch. The platform should allow content creators to broadcast live video streams, and viewers to watch and interact with these streams in real-time. The system should support a large number of concurrent users, both viewers and streamers, with low-latency and high-quality video streaming.",
    "category": "System Design",
    "company": "Zepto",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-streaming-service-similar-to-twitch/1177",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Availability",
      "High Scalability",
      "Microservices",
      "Databases"
    ]
  },
  {
    "serial_no": 79,
    "question_number": 1178,
    "title": "1178. High-Level Design: Design Inventory Management System",
    "description": "Design Inventory Management System for an Ecommerce platform.",
    "category": "System Design",
    "company": "Zepto",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-design-inventory-management-system/1178",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Availability",
      "High Scalability",
      "Backend",
      "Microservices",
      "Databases"
    ]
  },
  {
    "serial_no": 80,
    "question_number": 1179,
    "title": "1179. Database Schema: Co-Working Space like WeWork",
    "description": "Design database schema for a co-working space app like WeWork",
    "category": "System Design",
    "company": "Zepto",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/database-schema-co-working-space-like-wework/1179",
    "tags": [
      "Low-Level Design (LLD)",
      "Database Schema",
      "Database Design",
      "Backend",
      "SQL"
    ]
  },
  {
    "serial_no": 81,
    "question_number": 1180,
    "title": "1180. Scaling Kafka Cluster from 10M RPS to 1B RPS",
    "description": "There is Kafka cluster which is currently handling 10m requests per second. How would you scale to 1B?",
    "category": "System Design",
    "company": "Zepto",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/scaling-kafka-cluster-from-10m-rps-to-1b-rps/1180",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Kafka",
      "Backend"
    ]
  },
  {
    "serial_no": 82,
    "question_number": 1187,
    "title": "1187. High-Level Design: LinkedIn Content Moderation System",
    "description": "Design a content moderation system for LinkedIn that evaluates user-generated content (such as posts, comments, and messages) to ensure it aligns with LinkedIn's community guidelines. The system should detect potential guideline violations and take appropriate actions based on the severity and type of violation.\nThe system is expected to handle various types of content (text, images, links, and possibly video in the future) and scale to accommodate LinkedIn's vast user base. Additionally, the system should be able to respond quickly and adapt as guidelines evolve over time.\nRequirements:\nContent Analysis and Evaluation:\nIdentify and classify potential guideline violations such as hate speech, spam, harassment, misinformation, and inappropriate language or imagery.\nHandle a high volume of content in real-time with minimal latency.\nViolation Management:\nDecide the severity level for each violation (low, medium, high) based on guidelines.\nImplement an escalation path based on severity, such as soft warnings, content removal, or account suspension.\nAllow for human moderation for high-risk cases or borderline decisions.\nFeedback and Reporting Mechanism:\nProvide users with a clear reason for any action taken on their content.\nAllow users to appeal decisions, which could be handled by a moderation team.\nEnable users to report content they find objectionable, contributing to the system's moderation feedback loop.\nScalability and Adaptability:\nEnsure scalability to handle LinkedIn’s global user base.\nSupport adaptive learning to improve detection accuracy, such as incorporating machine learning models to detect new violation patterns and update guidelines automatically.\nIntegrate with existing LinkedIn infrastructure and leverage user profile information where relevant to enhance moderation accuracy.\nAssumptions:\nContent Types: Initially, the system will focus on text-based content, with the future capability to handle images, links, and videos.\nLatency Requirements: The system should operate in near-real-time for an efficient user experience.",
    "category": "System Design",
    "company": "LinkedIn",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-linkedin-content-moderation-system/1187",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Microservices",
      "Databases"
    ]
  },
  {
    "serial_no": 83,
    "question_number": 1192,
    "title": "1192. Low-Level Design: Cricket Match Dashboard",
    "description": "Design a cricket scorecard that will show the score for a team along with score of each player.\nYou will be given the number of players in each team, the number of overs and their batting order as input. Then, we can input overs ball by ball with the runs scored on that ball (could be wide, no ball or a wicket as well).\nYou are expected to print individual scores, number of balls faced, number of 4s, number of 6s for all the players from the batting side at the end of every over. You also need to print total score, total wickets. Essentially, you need to keep a track of all the players, strike changes (at the end of the over or after taking singles or 3s) and maintain their scores, also keep track of extra bowls that are being bowled (like wides or no balls). You also need to print which team won the match at the end.\nThis is the bare minimum solution which is expected for the problem. You can add some more features once you are done with these, like maintaining a bowlers record (total overs bowled, runs conceded, wickets taken, maiden overs, dot balls, economy, etc.). Total team extras, batsman strike rates, etc. can be added too. But these are \"good to have\" features, please try to complete the bare minimum first.\nMake sure your code is readable and maintainable and preferably object oriented. It should be modular and extensible, to add new features if needed.\nSample input and output:\nNo. of players for each team: 5\nNo. of overs: 2\nBatting Order for team 1:\nP1\nP2\nP3\nP4\nP5\nOver 1:\n1\n1\n1\n1\n1\n2\n\nScorecard for Team 1:\nPlayer Name Score 4s 6s Balls\nP1* 3 0 0 3\nP2* 4 0 0 3\nP3 0 0 0 0\nP4 0 0 0 0\nP5 0 0 0 0\nTotal: 7/0\nOvers: 1\n\nOver 2:\nW\n4\n4\nWd\nW\n1\n6\n\nScorecard for Team 1:\nPlayer Name Score 4s 6s Balls\nP1 3 0 0 4\nP2* 10 0 1 4\nP3 8 2 0 3\nP4* 1 0 0 1\nP5 0 0 0 0\nTotal: 23/2\nOvers: 2\n\nBatting Order for team 2:\nP6\nP7\nP8\nP9\nP10\n\nOver 1:\n4\n6\nW\nW\n1\n1\n\nScorecard for Team 2:\nPlayer Name Score 4s 6s Balls\nP6 10 1 1 3\nP7* 1 0 0 1\nP8 0 0 0 1\nP9* 1 0 0 1\nP10 0 0 0 0\nTotal: 12/1\nOvers: 1\n\nOver 2:\n6\n1\nW\nW\n\nScorecard for Team 2:\nPlayer Name Score 4s 6s Balls\nP6 10 1 1 2\nP7* 8 0 1 3\nP8 0 0 0 1\nP9 1 0 0 2\nP10 0 0 0 1\nTotal: 19/4\nOvers: 1.4\n\nResult: Team 1 won the match by 4 runs",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/low-level-design-cricket-match-dashboard/1192",
    "tags": [
      "Low-Level Design (LLD)",
      "Class Design",
      "System Design",
      "Design Patterns",
      "SOLID"
    ]
  },
  {
    "serial_no": 84,
    "question_number": 1196,
    "title": "1196. Multi-threaded Warehouse System for Shelf Management",
    "description": "Design a multi-threaded warehouse system to manage n shelves where multiple worker threads are responsible for handling two main tasks: Restocking and Order Fulfillment. Each worker thread should be able to access and modify the inventory on the shelves concurrently, but must do so without causing conflicts or deadlocks. Additionally, an Inventory Monitor thread should periodically check the shelves to ensure inventory consistency.",
    "category": "System Design",
    "company": "D. E. Shaw & Co.",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/multi-threaded-warehouse-system-for-shelf-management/1196",
    "tags": [
      "Multithreading",
      "Concurrency",
      "Thread Safety",
      "Thread Synchronization",
      "Locking",
      "Deadlock",
      "Multi-Threaded Services",
      "Synchronized",
      "Deadlock Prevention"
    ]
  },
  {
    "serial_no": 85,
    "question_number": 1210,
    "title": "1210. Design Distributed Transaction Manager Using 2-Phase Commit (2PC)",
    "description": "Design a custom distributed transaction manager for a multi-node database system that ensures ACID properties (Atomicity, Consistency, Isolation, Durability) using the 2-Phase Commit Protocol (2PC).",
    "category": "System Design",
    "company": "D. E. Shaw & Co.",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-distributed-transaction-manager-using-2-phase-commit-2pc/1210",
    "tags": [
      "Transaction",
      "Distributed System"
    ]
  },
  {
    "serial_no": 86,
    "question_number": 1251,
    "title": "1251. In-Memory Real-Time Concurrent Messaging/Chat System | Multithreaded Chat Application",
    "description": "Build a system for real-time messaging (like a chat application) with multiple users sending and receiving messages in a multithreaded environment. The system must handle message delivery and synchronization across users.",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/in-memory-real-time-concurrent-messaging-chat-system-multithreaded-chat-application/1251",
    "tags": [
      "Low-Level Design (LLD)",
      "Multithreading",
      "Concurrency",
      "Thread Synchronization"
    ]
  },
  {
    "serial_no": 87,
    "question_number": 1276,
    "title": "1276. Design and Build Copy Command like SCP to Efficiently Transfer Large Files Over a Network",
    "description": "Design and implement a custom Secure Copy Protocol (SCP) command to efficiently transfer large files (e.g., up to 1TB) between two machines over a network.",
    "category": "System Design",
    "company": "Rubrik",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-and-build-copy-command-like-scp-to-efficiently-transfer-large-files-over-a-network/1276",
    "tags": [
      "System Design",
      "Backend",
      "File Transfer",
      "Chunk-Based Transfer"
    ]
  },
  {
    "serial_no": 88,
    "question_number": 1279,
    "title": "1279. Design/Architecture of your Past Project",
    "description": "Do high level design of one your past projects.",
    "category": "System Design",
    "company": "Cashfree Payments",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-architecture-of-your-past-project/1279",
    "tags": [
      "System Design",
      "Past Experience",
      "Project Based",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 89,
    "question_number": 1330,
    "title": "1330. Database Migration",
    "description": "How to migrate data from one DB to another with minimal downtime.",
    "category": "System Design",
    "company": "super.money",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/database-migration/1330",
    "tags": [
      "High-Level Design (HLD)",
      "High Availability",
      "System Design",
      "Databases"
    ]
  },
  {
    "serial_no": 90,
    "question_number": 1332,
    "title": "1332. High-Level Design: Online Chess Matchmaking (FCFS)",
    "description": "You need to design a matchmaking system for an online chess platform. The system should pair players using a First-Come, First-Served (FCFS) approach, ensuring minimal wait time and handling a high volume of concurrent users efficiently.\nThe system should be able to scale to millions of players while maintaining low latency. Players should be matched as soon as another available player is found. The design should handle simultaneous matchmaking requests, ensuring no player is matched more than once.\nConsider how the system will handle failures, such as a player disconnecting before being paired, and ensure that no player is stuck in an inconsistent state. Think about how to efficiently manage concurrent matchmaking requests while maintaining performance.\nYou are expected to define the high-level architecture, data model, and request flow, and suggest optimizations to make the system scalable and reliable.",
    "category": "System Design",
    "company": "super.money",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/high-level-design-online-chess-matchmaking-fcfs/1332",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Concurrency",
      "Chess"
    ]
  },
  {
    "serial_no": 91,
    "question_number": 1334,
    "title": "1334. Database Design: Design a Database Schema for a Hotel Booking System Like Oyo, MakeMyTrip, Booking.com, Agoda, etc.",
    "description": "Design the database schema for a hotel booking system that efficiently manages hotel listings, room availability, and customer bookings while ensuring data consistency and concurrency handling. The design should also be extensible to accommodate future features.\nThe schema should support the following key functionalities:\nHotel & Room Management: Store details of hotels, room types, and room availability.\nBooking System: Allow users to search for hotels, check room availability, and make reservations.\nUser Management: Maintain customer profiles and past bookings.\nConcurrency Handling: Prevent overbooking when multiple users attempt to book the same room simultaneously.\nExtensibility: Allow future enhancements, such as adding promotions, loyalty programs, or dynamic pricing.\nEnsure data consistency, efficient indexing, and transaction handling in your design. Explain table structures, relationships (one-to-many, many-to-many), and concurrency control mechanisms to support reliable and scalable bookings.",
    "category": "System Design",
    "company": "ServiceNow",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/database-design-design-a-database-schema-for-a-hotel-booking-system-like-oyo-makemytrip-booking-com-agoda-etc/1334",
    "tags": [
      "Database Design",
      "Database Schema",
      "System Design",
      "SQL"
    ]
  },
  {
    "serial_no": 92,
    "question_number": 1347,
    "title": "1347. Design an Image-Serving Library",
    "description": "You need to design an image-serving library. This library will accept an HTTP URL of an image and handle the entire process of downloading, caching, and serving the image efficiently.\nKey Requirements:\nResiliency Features:\nImplements retry mechanisms (exponential backoff, jitter, etc.).\nFallback strategies for temporary failures.\nCaching Mechanism:\nImplements an image caching layer to reduce redundant downloads.\nSupports various cache eviction policies (LRU, LFU, custom).\nInput-Output Modeling:\nDefines clear APIs for integration.\nDesign Patterns & Best Practices:\nFollows proper naming conventions for readability and maintainability.\nUses modular design for extensibility.\nApplies industry-standard design patterns (e.g., Singleton for caching, Factory for image handling).",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-an-image-serving-library/1347",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Design Patterns",
      "SOLID Principles"
    ]
  },
  {
    "serial_no": 93,
    "question_number": 1353,
    "title": "1353. Design an Ad Click Aggregator",
    "description": "Design an Ad Click Aggregator system that collects and aggregates data on ad clicks. It will be used by advertisers to track the performance of their ads and optimize their campaigns. For our purposes, we will assume these are ads displayed on a website or app, like Facebook.\nRequirements: Users can click on an ad and be redirected to the advertiser's website Advertisers can query ad click metrics over time with a minimum granularity of 1 minute",
    "category": "System Design",
    "company": "Meta",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-an-ad-click-aggregator/1353",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 94,
    "question_number": 1359,
    "title": "1359. What are different mechanisms you would implement to detect and handle failures in a critical system?",
    "description": "What are different mechanisms you would implement to detect and handle failures in a critical system?",
    "category": "System Design",
    "company": "Salesforce",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/what-are-different-mechanisms-you-would-implement-to-detect-and-handle-failures-in-a-critical-system/1359",
    "tags": [
      "High-Level Design (HLD)",
      "Fault Tolerance",
      "Resiliency",
      "Failure Handling",
      "System Design"
    ]
  },
  {
    "serial_no": 95,
    "question_number": 1378,
    "title": "1378. How to Keep a Distributed System Consistent?",
    "description": "How to Keep a Distributed System Consistent?",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/how-to-keep-a-distributed-system-consistent/1378",
    "tags": [
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 96,
    "question_number": 1383,
    "title": "1383. Microservices v/s Monolithic",
    "description": "Explain differences between Microservices v/s Monolithics\nWhat if you are migrating from Monolithic to Microservices and both doesn't works ?",
    "category": "System Design",
    "company": "Adobe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/microservices-v-s-monolithic/1383",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Monolithics vs Microservices",
      "Microservices"
    ]
  },
  {
    "serial_no": 97,
    "question_number": 1384,
    "title": "1384. What are the Cons of Using Locks? How will you solve?",
    "description": "What are the Cons of Using Locks? How will you solve?",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/what-are-the-cons-of-using-locks-how-will-you-solve/1384",
    "tags": [
      "Multithreading",
      "Multi-Threaded Services",
      "Locking",
      "Deadlock",
      "Performance Optimization"
    ]
  },
  {
    "serial_no": 98,
    "question_number": 1389,
    "title": "1389. How to Create an Idempotent POST API?",
    "description": "How to create an idempotent POST api?",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/how-to-create-an-idempotent-post-api/1389",
    "tags": [
      "REST",
      "Idempotent",
      "API Design"
    ]
  },
  {
    "serial_no": 99,
    "question_number": 1390,
    "title": "1390. Design a Generic API That Would Serve Multiple Request",
    "description": "Design a Generic API That Would Serve Multiple Request",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/design-a-generic-api-that-would-serve-multiple-request/1390",
    "tags": [
      "API Design",
      "REST"
    ]
  },
  {
    "serial_no": 100,
    "question_number": 1391,
    "title": "1391. Difference between PUT and POST",
    "description": "Difference between PUT and POST",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/difference-between-put-and-post/1391",
    "tags": [
      "REST",
      "API Design",
      "HTTP"
    ]
  },
  {
    "serial_no": 101,
    "question_number": 1392,
    "title": "1392. Difference between HTTP and HTTPs",
    "description": "Difference between HTTP and HTTPs.\nWhat make https more secure?",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/difference-between-http-and-https/1392",
    "tags": [
      "HTTP",
      "Security",
      "HTTPs",
      "SSL",
      "API Design"
    ]
  },
  {
    "serial_no": 102,
    "question_number": 1393,
    "title": "1393. How do you Optimize the SQL Queries?",
    "description": "How do you Optimize the SQL queries?",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/how-do-you-optimize-the-sql-queries/1393",
    "tags": [
      "SQL",
      "MySQL",
      "Performance Optimization",
      "Latency Optimization",
      "Databases",
      "Database Design"
    ]
  },
  {
    "serial_no": 103,
    "question_number": 1394,
    "title": "1394. How Would You Decide The Ideal Number of Partions in a Kafka Cluster",
    "description": "How Would You Decide The Ideal Number of Partions in a Kafka Cluster for Production.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/how-would-you-decide-the-ideal-number-of-partions-in-a-kafka-cluster/1394",
    "tags": [
      "Kafka",
      "Partition",
      "Horizontal Scaling",
      "High Scalability",
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 104,
    "question_number": 1399,
    "title": "1399. Exposing Weather System APIs To Third Party",
    "description": "You are getting whether related data every 24 hrs to one of your data center. You need to design system that will expose APIs to 3rd party Apps to updated this data. Your system should return current location whether data as well prediction. and also user can ask for any specific city data as well.",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/exposing-weather-system-apis-to-third-party/1399",
    "tags": [
      "High-Level Design (HLD)",
      "High Availability",
      "High Scalability",
      "Latency Optimization"
    ]
  },
  {
    "serial_no": 105,
    "question_number": 1400,
    "title": "1400. Database Design For Expense Sharing Application Like Splitwise",
    "description": "Database Design For Expense Sharing Application Like Splitwise",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/database-design-for-expense-sharing-application-like-splitwise/1400",
    "tags": [
      "Low-Level Design (LLD)",
      "Database Schema",
      "Database Design",
      "SQL"
    ]
  },
  {
    "serial_no": 106,
    "question_number": 1403,
    "title": "1403. Design a Flight Aggregator Service",
    "description": "Design a Flight Aggregator Service",
    "category": "System Design",
    "company": "PhonePe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-flight-aggregator-service/1403",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Aggregator System"
    ]
  },
  {
    "serial_no": 107,
    "question_number": 1427,
    "title": "1427. Facebook status and search",
    "description": "Function Requirements:\nUser creates status which include only texts\nAnother user is able to search for the statuses.\nSearch should be sorted by recency.\nNon-Functional Requirements\n1B status posted per day\n10M searches supported per second.\nStore the status infinitely.",
    "category": "System Design",
    "company": "Meta",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/facebook-status-and-search/1427",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 108,
    "question_number": 1438,
    "title": "1438. Design data compliance software.",
    "description": "Design data compliance software. e.g., Once User deletes his/her account. Anyone should not be able to see his/her data. Data is in size of EB.",
    "category": "System Design",
    "company": "LinkedIn",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-data-compliance-software/1438",
    "tags": [
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 109,
    "question_number": 1477,
    "title": "1477. Match Report Generator with Player Performance Metrics Using a Given Public API",
    "description": "Given a public API that provides recent match details, generate a simple match report summarizing the results\nPlayer statistics, including performance metrics",
    "category": "System Design",
    "company": "Qualcomm",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/match-report-generator-with-player-performance-metrics-using-a-given-public-api/1477",
    "tags": [
      "Low-Level Design (LLD)",
      "Frontend"
    ]
  },
  {
    "serial_no": 110,
    "question_number": 1482,
    "title": "1482. Design a social networking site",
    "description": "Design a social networking site, with functionalities like adding posts, likes, comments, sending and accepting/rejecting friend request, giving 'people you may know' recommendations.\nFollow ups:\nHow to handle concurrent friend requests.\nHow to tackle a situation when a single user is getting lots of friend requests.\nHow to handle concurrency for each cases, how to tackle dirty read and race conditions.\nHow to design a 'people you may know' feature, algo behind that and other details.\nWhere to keep connections data and which database to use for each storage.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-social-networking-site/1482",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Concurrency",
      "Databases"
    ]
  },
  {
    "serial_no": 111,
    "question_number": 1484,
    "title": "1484. Design database backup service",
    "description": "Design database backup service",
    "category": "System Design",
    "company": "Nutanix",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-database-backup-service/1484",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Database Design",
      "Databases",
      "High Availability",
      "Replication"
    ]
  },
  {
    "serial_no": 112,
    "question_number": 1508,
    "title": "1508. Frequency-Based Coupon Selection (Per Minute Window)",
    "description": "Design a system to randomly select coupons based on their assigned frequency within a 1-minute time window.\nEach coupon has a unique ID and an associated frequency score, representing how often it should appear relative to others. For example, a coupon with frequency 10 should be twice as likely to be selected as one with frequency 5.\nRequirements\nGiven a list of coupons with their frequency, randomly select one every time a request comes in, in proportion to their frequency.\nThe selection should happen within 1-minute time windows, i.e., the frequency configuration is valid for that window only.\nOptimize for low-latency selection and high-throughput under concurrent requests.\nEnsure randomness while respecting frequency weights.",
    "category": "System Design",
    "company": "Zepto",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/frequency-based-coupon-selection-per-minute-window/1508",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Asynchronous",
      "Caching",
      "Precomputation",
      "Low Latency",
      "High Scalability",
      "Backend"
    ]
  },
  {
    "serial_no": 113,
    "question_number": 1538,
    "title": "1538. High-Level Design: Doctor-Patient Note & Prescription System",
    "description": "Suppose I am going into the hospital as a patient and want to visit a doctor. The hospital makes an appointment for me. They also ask for any ongoing problems I might have like the history of me.\nIn a 1:1 session with the Doctor, he needs to take all the notes during the conversation with me.\nAnd then finally the doctor gave me a prescription based on the notes.\nWe need to automate the above system by building an AI note-making system for hospitals for conversations between doctors and patients.\nWe need a conversational AI system that understands who is doctor, patient, make a summarized note of the conversation and also make the prescription details told by the doctor.\nGive me a High-Level System design for this problem.",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-doctor-patient-note-prescription-system/1538",
    "tags": [
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 114,
    "question_number": 1547,
    "title": "1547. Design a Distributed File Storage Service like Dropbox, Google Drive, etc.",
    "description": "Design a Distributed File Storage Service like Dropbox, Google Drive, etc.\nRequirements:\nUsers should be able to upload a file from any device\nUsers should be able to download a file from any device\nUsers can automatically sync files across devices\nFollow up if time permits:\nUsers should be able to share a file with other users and view the files shared with them",
    "category": "System Design",
    "company": "Adobe",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-distributed-file-storage-service-like-dropbox-google-drive-etc/1547",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Backend",
      "Distributed System",
      "High Scalability",
      "Blob Storage",
      "Data Storage",
      "Microservices"
    ]
  },
  {
    "serial_no": 115,
    "question_number": 1552,
    "title": "1552. Design a System to Determine Degrees of Connection Between Two Users",
    "description": "Design a system similar to LinkedIn Connections that can answer the query: How many levels or degrees of connection exist between two users. For example, direct connections are 1st-degree, friends of friends are 2nd-degree, and so on. The system should efficiently handle up to 1 billion users.",
    "category": "System Design",
    "company": "Rubrik",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-system-to-determine-degrees-of-connection-between-two-users/1552",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "High Scalability",
      "High Availability",
      "Low Latency",
      "Backend"
    ]
  },
  {
    "serial_no": 116,
    "question_number": 1560,
    "title": "1560. Multithreading: Two-Tier Cache Refresh System",
    "description": "Design and implement a thread-safe system for refreshing a two-tier caching architecture, which consists of:\nA local (in-memory) cache per application instance.\nA shared distributed cache (e.g., Redis, Memcached) accessed across instances.\nFunctional Requirements:\nWhen a cache miss or expiry happens:\nThe local cache must be refreshed.\nIf necessary, the distributed cache must also be refreshed.\nConcurrency Control:\nOnly one thread per application instance must refresh the local cache for a given key at a time.\nOnly one thread across all instances should refresh the shared distributed cache for that key.\nOther threads should wait for the refresh to complete and use the updated value.",
    "category": "System Design",
    "company": "Zeotap",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/multithreading-two-tier-cache-refresh-system/1560",
    "tags": [
      "Multithreading",
      "Multi-Threaded Services",
      "Thread Synchronization",
      "Concurrency",
      "Cache",
      "Multi Layer Cache",
      "Thread Safety"
    ]
  },
  {
    "serial_no": 117,
    "question_number": 1562,
    "title": "1562. My Orders Page with Infinite Scroll",
    "description": "Build a frontend web page that displays the list of orders placed by a user, similar to the \"My Orders\" section on Amazon.\nRequirements:\nList Orders:\nDisplay order details such as product name, order ID, date, amount, and status.\nShow a clean, card-based or list-style layout.\nInfinite Scrolling:\nAs the user scrolls to the bottom, fetch older orders via paginated API calls.\nEnsure smooth loading and avoid duplicate API requests.\nLoading States:\nShow loading indicators while data is being fetched.\nHandle empty state (no orders) and error state (API failure) gracefully.\nPerformance Considerations:\nDebounce scroll events if applicable.\nAvoid unnecessary re-renders and ensure a good user experience.\nTech Constraints:\nAssume a dummy API like /api/orders?page=1&limit=10.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/my-orders-page-with-infinite-scroll/1562",
    "tags": [
      "Frontend",
      "React.Js",
      "Javascript",
      "Typescript",
      "Machine Coding Round",
      "Infinite Scroll",
      "Error Handling",
      "Component Design",
      "Class Design",
      "Clean Coding",
      "State Management"
    ]
  },
  {
    "serial_no": 118,
    "question_number": 1568,
    "title": "1568. High-Level Design - HackerRank Live Contest Leaderboard",
    "description": "Design the backend architecture for a HackerRank-style live coding contest leaderboard that supports:\nCore Requirements:\nLive Updates:\nThe leaderboard must reflect participants’ scores and rankings in real-time as they submit solutions.\nScoring & Tie-Breaking:\nParticipants earn scores based on problem difficulty and time of submission.\nIn case of ties, the earlier submission should rank higher.\nScalability:\nThe system should support millions of users concurrently participating and viewing the leaderboard.\nSubmissions could spike at any time - system should auto-scale under heavy load.\nCustom Functional Requirements:\nFilters (e.g., show only friends or company-specific participants).\nRegion-wise leaderboards.\nAbility to “follow” a participant and receive updates.\nFreeze leaderboard updates in the last N minutes of the contest.\nLatency Constraints:\nLeaderboard updates and reads should reflect within a few seconds.\nSystem should be eventually consistent but strive for near real-time accuracy.\nFollow-up Discussion Points:\nHow would you structure your services (microservices, monolith)?\nWhat DB and cache strategy would you use?\nHow will you handle real-time updates (polling, websockets, pub-sub)?\nWhat would you store in cache vs persistent DB?\nWhat metrics and observability would you add?",
    "category": "System Design",
    "company": "Meta",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/high-level-design-hackerrank-live-contest-leaderboard/1568",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Backend",
      "Leaderboard System",
      "High Scalability",
      "Low Latency",
      "Cache",
      "Database Design"
    ]
  },
  {
    "serial_no": 119,
    "question_number": 1575,
    "title": "1575. Scaling a Web Service (Recipe + Products)",
    "description": "The web service allows users to browse recipes and purchase ingredients. It recently became popular and is facing performance bottlenecks. → What could be the potential issues and how would you improve the system?",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/scaling-a-web-service-recipe-products/1575",
    "tags": [
      "High Scalability",
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "Cache",
      "Performance Optimization",
      "Low Latency"
    ]
  },
  {
    "serial_no": 120,
    "question_number": 1576,
    "title": "1576. Compute-Intensive Animation Generation",
    "description": "A service animates hand-drawn characters uploaded by kids. These jobs are compute-heavy and handled by a server farm. → How would you reduce infrastructure/server cost while maintaining user experience?",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/compute-intensive-animation-generation/1576",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Cost Optimization",
      "High Scalability",
      "Compute Heavy"
    ]
  },
  {
    "serial_no": 121,
    "question_number": 1577,
    "title": "1577. Handling Unreliable Third Party APIs for Sports Statistics Service | Integration With Unreliable Third-Party API",
    "description": "Design a sports statistics web service that depends on multiple third party APIs to fetch real time scores and player statistics. However, these third party APIs are unreliable and suffer from frequent outages or performance issues. The system should continue to serve users even when external services are unavailable or slow.\nThe requirements are:\nUsers should be able to view sports data such as scores and statistics with minimal delay.\nThe system should gracefully handle cases when some third party APIs are down.\nThe design should consider fallback mechanisms when APIs fail.\nHistorical data should still be available to users even if live updates cannot be fetched.\nThe design should prevent excessive costs or delays caused by retrying failed requests.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/handling-unreliable-third-party-apis-for-sports-statistics-service-integration-with-unreliable-third-party-api/1577",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Reliability",
      "High Availability",
      "Circuit Breaker",
      "Hystrix",
      "API Integration",
      "Caching",
      "Fault Tolerance",
      "Karat Round"
    ]
  },
  {
    "serial_no": 122,
    "question_number": 1578,
    "title": "1578. IoT Device Migration to Microcontroller",
    "description": "You’re migrating a smart appliance from an embedded computer (with Ethernet) to a resource-constrained microcontroller. → What factors should you consider in this migration, both from system and network perspectives?",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/iot-device-migration-to-microcontroller/1578",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend"
    ]
  },
  {
    "serial_no": 123,
    "question_number": 1579,
    "title": "1579. Cost Estimation for Short Video Platform",
    "description": "Users upload short (≤1 min) videos with a TTL between 5–24 hours. → What factors should be considered to estimate the infrastructure cost for this platform over the next year if it becomes popular?",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/cost-estimation-for-short-video-platform/1579",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "Cost Optimization",
      "Infrastructure"
    ]
  },
  {
    "serial_no": 124,
    "question_number": 1582,
    "title": "1582. Tranporting Logs From Edge Data Centers to A Central/Core Data Center",
    "description": "You were given an existing design of an edge data center, where the logs gets generated. Each edge DC is in different city (NYC, LA, SEA). You were tasked to transport the logs to a core datacenter.\nFunctional requirements: 1/ Logs need to be transported to a db in core datacenter 2/ Users should be able to query the logs in a centralised DB\nNon-functional requirements: 1/ SLA for latency is 1 min on avg, max 15 mins 2/ Encryption at rest and transit 3/ Highly available (eventual consistency is accepted)",
    "category": "System Design",
    "company": "Cloudflare",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/tranporting-logs-from-edge-data-centers-to-a-central-core-data-center/1582",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Global Replication",
      "Logs",
      "Asynchronous",
      "Kafka"
    ]
  },
  {
    "serial_no": 125,
    "question_number": 1592,
    "title": "1592. High-Level Design: Stock Trading Simulation System Design",
    "description": "Simulation system for stock trading using historical data and live data",
    "category": "System Design",
    "company": "Zscaler",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/high-level-design-stock-trading-simulation-system-design/1592",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Simulation",
      "Stock Trading",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 126,
    "question_number": 1602,
    "title": "1602. Multi-Device State Sync Service",
    "description": "Design a distributed system that keeps a user’s devices in synchronized state across up to 10 devices per user.\nUse Case:\nWhen a user performs an action (e.g., turning off a smart light) on one device, that action must be propagated and reflected on all other devices registered to the same user - ensuring all devices stay in sync with the latest state.\nCore Requirements:\nA user can have up to 10 devices (e.g., mobile apps, tablets, smart speakers, etc.).\nEach device must be uniquely identifiable and mapped to a user.\nWhen an action (like \"turn off light\") is performed on one device:\nThe system should propagate this update to all other devices of the same user.\nUpdates must reflect in near real-time (low latency).\nHandle offline devices - ensure they receive state updates once back online.\nThe system should scale to millions of users and devices.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/multi-device-state-sync-service/1602",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 127,
    "question_number": 1610,
    "title": "1610. Designing an online gifting platform similar to Ferns & Petals",
    "description": "Designing an online gifting platform similar to Ferns & Petals",
    "category": "System Design",
    "company": "Flipkart",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/designing-an-online-gifting-platform-similar-to-ferns-petals/1610",
    "tags": [
      "Low-Level Design (LLD)",
      "Clean Coding",
      "System Design",
      "Design Patterns",
      "SOLID Principles",
      "Extensibility"
    ]
  },
  {
    "serial_no": 128,
    "question_number": 1617,
    "title": "1617. Low-Latency API over Amazon S3 Data",
    "description": "Design a high-level system and API that responds to user queries within 2 seconds, where the underlying data is stored in Amazon S3.\nUse Case:\nUsers query hourly or weekly analytical data (e.g., logs, metrics, reports) through an API. The raw or aggregated data is stored in Amazon S3, and the API must return relevant results within 2 seconds.\nCore Requirements:\nQuery Types:\nUsers can query based on time windows: hourly, daily, or weekly.\nQueries may include filters like userId, region, or eventType.\nPerformance Constraint:\nEnd-to-end API latency must be under 2 seconds, even with high QPS.\nData Storage:\nRaw and/or pre-aggregated data is stored in Amazon S3 in a queryable format (e.g., Parquet, JSON, CSV).\nScalability:\nThe system must handle concurrent API requests from many users.\nShould scale horizontally and be resilient to S3 latency spikes.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/low-latency-api-over-amazon-s3-data/1617",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Backend",
      "High Scalability",
      "Low Latency",
      "Time Series",
      "S3"
    ]
  },
  {
    "serial_no": 129,
    "question_number": 1620,
    "title": "1620. In Memory Search Engine For a Blogging Portal",
    "description": "Your organization has started a new tech blog with interesting tech stories and you’re responsible for designing and implementing an in-memory search engine, supporting the search functionality on the blog content.\nRequirements:\nIt should be possible to create a dataset in the search engine.\nIt should be possible to insert and delete documents in a given dataset. Each document is simply a piece of text.\nIt should be possible to search through documents for a search pattern in a given dataset.\nIt should be possible to order the search results\nExample:\nSearch term: apple\n\nDoc1: apple is a fruit\nDoc2: apple apple come on\nDoc3: oranges are sour\nDoc4: apple is sweet\nDoc5: veggies are healthy\n\nResult : Doc2, Doc1, Doc4",
    "category": "System Design",
    "company": "Razorpay",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/in-memory-search-engine-for-a-blogging-portal/1620",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Backend",
      "Extensibility",
      "Clean Coding",
      "Design Patterns",
      "SOLID Principles"
    ]
  },
  {
    "serial_no": 130,
    "question_number": 1632,
    "title": "1632. What will you do in a case where the latency is high? What all optimisations can be done in that scenario",
    "description": "What will you do in a case where the latency is high? What all optimisations can be done in that scenario",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/what-will-you-do-in-a-case-where-the-latency-is-high-what-all-optimisations-can-be-done-in-that-scenario/1632",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Latency Optimization",
      "Low Latency",
      "Performance Optimization"
    ]
  },
  {
    "serial_no": 131,
    "question_number": 1635,
    "title": "1635. Subscription Management Service",
    "description": "Design and implement a scalable and extensible subscription management system to handle software product subscriptions, billing, and trials.\nScenario:\nYou are building a backend service to manage subscriptions for products such as:\nJIRA: $10/month\nConfluence: $7.5/month\nBitbucket: $8/month\nUsers can subscribe to any combination of these products.\nCore Requirements:\nSubscription Model:\nUsers can subscribe to one or more products.\nSubscriptions are billed monthly based on the active usage per product.\nSupport queries like: \"For a given year, what is the monthly billing per user?\"\nTrial Periods:\nProducts may come with different trial periods:\nJIRA: 14 days\nConfluence: 30 days\nBitbucket: 7 days\nBilling starts only after trial ends.\nExtensible Design:\nThe system should be extensible to support:\nNew products\nCustom pricing rules (e.g., usage-based billing, discounts)\nTrial configurations per product\nPromotions/Discounts\nFollow-up Questions:\nHow would you support percentage discounts or time-bound promotions?\nHow would you model trial extensions or per-user custom plans?\nHow would you handle grace periods or failed payments?\nWhat DB schema or class design would support easy extensibility?",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/subscription-management-service/1635",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Subscription System"
    ]
  },
  {
    "serial_no": 132,
    "question_number": 1643,
    "title": "1643. Rule Evaluation Engine for Expenses",
    "description": "We have a list of expense and rules. Aim is to validate rules for each expense.\nEach expense is similar to\n{\n expenseid: \"1\"\n itemId: \"Item1\"\n expensetype: \"Food\"\n amountInUsd : \"250\"\n sellerType : \"restaurant\"\n SellerName \"ABC restaurant\"\n\n}\nList of rules similar to\nTotal expense should not be > 175\nSeller type restaurant should not have expense more that 45\nEntertainment expense type should not be charged\nRun the rules on expense and flag the rule which do not satisfy. Implement following:\nevaluateRule(List<rule> , List<expense>)",
    "category": "System Design",
    "company": "Rippling",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/rule-evaluation-engine-for-expenses/1643",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Extensibility",
      "Rule-Based System",
      "Clean Coding",
      "Design Patterns",
      "SOLID Principles"
    ]
  },
  {
    "serial_no": 133,
    "question_number": 1644,
    "title": "1644. Build a Extensible and Maintainable Chat Platform (Frontend Only)",
    "description": "Imagine you are building the frontend for a chat platform - a simplified version of apps like Slack or MS Teams. Your task is not just to make it work, but to design it in a way that is extensible, testable, and maintainable, as if this code would go into production.\nThis round evaluates your low-level design skills, component abstractions, code modularity, and how you think about extensible a frontend system beyond just the current use-case.\n🎯 Core Requirements\nUI Layout\nA two-pane layout:\nSidebar: Displays a list of mock conversations or users.\nMain Chat Window: Displays messages of the selected conversation.\nA message input box with a \"Send\" button.\nSent messages should show up instantly in the chat window.\nMessage Functionality\nAllow sending and viewing messages in chronological order.\nDisplay the sender name, message content, and timestamp.\nSimulate initial chat data with mock JSON or in-memory data.\nCode Quality Focus\nPrioritize readable and maintainable code.\nApply separation of concerns: UI, logic, and data should be modular.\nExtensibility Considerations (Bonus)\nThink ahead: How would you add message reactions, file uploads, real-time updates, etc. in the future?\nUse patterns that support future scaling (e.g., props drilling vs. context/state management).\nBasic error handling for invalid input\nUnit tests for at least one key component\nStyling\nNormal UI - no need for fancy designs. Basic design showing the functionality should be enough.\n🧠 Evaluation Parameters\nExtensibility in design for future usecases\nCode structure and modularity\nComponent reusability\nNaming conventions and readability\nDesign patterns used\nReadiness for testing and scalability\nClear separation of concerns\nThis round is not just about finishing a feature; it’s about writing code that you’d be confident pushing to production. Think in terms of long-term code health - avoid over engineering, but show foresight. You’ll be asked to walk through your thought process and design decisions after implementation.",
    "category": "System Design",
    "company": "Flipkart",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/build-a-extensible-and-maintainable-chat-platform-frontend-only/1644",
    "tags": [
      "Machine Coding Round",
      "Low-Level Design (LLD)",
      "Chat App",
      "Frontend",
      "React.Js",
      "Extensibility",
      "Maintainability",
      "Clean Coding",
      "Design Patterns",
      "SOLID Principles",
      "Code Design"
    ]
  },
  {
    "serial_no": 134,
    "question_number": 1645,
    "title": "1645. Optimizing Frontend Build Size",
    "description": "You’re working on a large-scale frontend application and notice the JavaScript bundle size is impacting performance. Discuss the strategies and tools you would use to analyze and reduce the build size without breaking functionality.",
    "category": "System Design",
    "company": "Flipkart",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/optimizing-frontend-build-size/1645",
    "tags": [
      "Frontend",
      "React.Js",
      "Javascript",
      "Performance Optimization",
      "Webpack",
      "Bundle Size",
      "Optimization",
      "Code Splitting"
    ]
  },
  {
    "serial_no": 135,
    "question_number": 1646,
    "title": "1646. Improving Asset-Heavy Web Applications",
    "description": "Your application has many images, fonts, and videos, making it slow to load. How would you go about improving performance in such an asset-heavy environment?",
    "category": "System Design",
    "company": "Flipkart",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/improving-asset-heavy-web-applications/1646",
    "tags": [
      "Frontend",
      "Frontend Optimization",
      "CDN",
      "Content Delivery Network (CDN)",
      "Lazy Loading",
      "Optimization"
    ]
  },
  {
    "serial_no": 136,
    "question_number": 1651,
    "title": "1651. async vs defer in Script Tags",
    "description": "What is the difference between async and defer attributes in <script> tags? When should each be used?",
    "category": "System Design",
    "company": "Flipkart",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/async-vs-defer-in-script-tags/1651",
    "tags": [
      "Frontend",
      "Asynchronous",
      "Performance Optimization",
      "Frontend Optimization",
      "DOM Parsing"
    ]
  },
  {
    "serial_no": 137,
    "question_number": 1668,
    "title": "1668. Design an Online Bookstore Platform",
    "description": "",
    "category": "System Design",
    "company": "",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-an-online-bookstore-platform/1668",
    "tags": []
  },
  {
    "serial_no": 138,
    "question_number": 1675,
    "title": "1675. Design a Config-Driven Web Application | Using BFF Layer For Frontend Latency Optimizations",
    "description": "Design a frontend application that renders dynamic UI based on a server-sent configuration. The frontend should not be hardcoded, but instead rely on a JSON or schema-driven config to determine what to show on the screen (e.g., input fields, dropdowns, layout blocks, widgets).\nYour goal is to design the overall architecture and flow for this application with a focus on:\nConfig Interpretation on Client: How would the frontend consume and interpret the configuration?\nBackend-for-Frontend (BFF) Layer:\nWhat is the BFF's role in simplifying frontend logic?\nHow does it help in data shaping and aggregation from microservices?\nOptimizations:\nWhere would caching help (client/BFF/API level)?\nWhen would you use server-side caching vs client memory caching vs CDN?\nHow would you handle stale configs or invalidation strategies?",
    "category": "System Design",
    "company": "Adobe",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-a-config-driven-web-application-using-bff-layer-for-frontend-latency-optimizations/1675",
    "tags": []
  },
  {
    "serial_no": 139,
    "question_number": 1682,
    "title": "1682. Designing a Blue-Green Deployment Strategy for a Highly Available Web Service",
    "description": "",
    "category": "System Design",
    "company": "Unknown Company",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/designing-a-blue-green-deployment-strategy-for-a-highly-available-web-service/1682",
    "tags": []
  },
  {
    "serial_no": 140,
    "question_number": 1685,
    "title": "1685. Key Differences Between Vue 2 and Vue 3",
    "description": "List the fundamental differences between Vue 2 and Vue 3, focusing on changes in the reactivity system, Composition API vs Options API, performance improvements, and TypeScript support. Also, explain when you would choose Vue 3 over Vue 2 in enterprise projects.",
    "category": "System Design",
    "company": "Tata Consultancy Services",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/key-differences-between-vue-2-and-vue-3/1685",
    "tags": [
      "Frontend",
      "Javascript",
      "Vue.js",
      "Framework Comparison",
      "Typescript"
    ]
  },
  {
    "serial_no": 141,
    "question_number": 1689,
    "title": "1689. SVG vs PNG",
    "description": "Compare SVG and PNG formats in terms of scalability, performance, rendering, and file size. Provide use cases for when to prefer one over the other.",
    "category": "System Design",
    "company": "Tata Consultancy Services",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/svg-vs-png/1689",
    "tags": [
      "Web",
      "Performance Optimization",
      "Image Format",
      "SVG",
      "PNG",
      "UI/UX"
    ]
  },
  {
    "serial_no": 142,
    "question_number": 1692,
    "title": "1692. Server-Side vs Client-Side Rendering",
    "description": "Explain the differences between SSR and CSR with respect to SEO, performance, latency, and complexity. Provide real-world scenarios where each is preferred.",
    "category": "System Design",
    "company": "Tata Consultancy Services",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/server-side-vs-client-side-rendering/1692",
    "tags": [
      "Frontend",
      "Web",
      "Server-Side Rendering (SSR)",
      "Client-Side Rendering (CSR)",
      "Search Engine Optimization (SEO)",
      "Performance Optimization"
    ]
  },
  {
    "serial_no": 143,
    "question_number": 1702,
    "title": "1702. Design a Locker Allocation System for Incoming Packages",
    "description": "You are designing a Locker Management System to help manage incoming packages in a warehouse. Each package needs to be stored in a locker, and lockers come in predefined sizes: S, M, L, XL, XXL.\nA package will always be assigned to a locker of its exact size category, and no two packages can be assigned to the same locker at the same time. The system should allow for dynamic addition of lockers and support the tracking of available lockers.\nYour task is to design the system and implement the following operations:\nCore Requirements:\nAdd Locker: Add a locker of a given size into the system. addLocker(size: string): void\nFind Locker: Given a package size, return an available locker of the same size if any exist. findLocker(size: string): Locker | null\nUpdate Locker: Store or remove a package from a locker.\nTo assign a locker to a package: storePackage(lockerId: string): boolean\nTo free the locker after package removal: removePackage(lockerId: string): boolean\nExpected Behavior:\nLockers are identified by unique IDs and sizes.\nOnce a locker is occupied, it is unavailable until the package is removed.\nExample Flow:\naddLocker(\"M\")           → Adds a medium-sized locker.\naddLocker(\"L\")           → Adds a large-sized locker.\nfindLocker(\"M\")          → Returns a free medium-sized locker.\nstorePackage(\"locker123\")→ Marks locker123 as occupied.\nremovePackage(\"locker123\")→ Frees locker123 for reuse.\nConstraints:\nLocker sizes are always one of: \"S\", \"M\", \"L\", \"XL\", \"XXL\"\nEach locker has a unique ID\nOnly one package per locker is allowed at any time",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-locker-allocation-system-for-incoming-packages/1702",
    "tags": [
      "Low-Level Design (LLD)",
      "System Design",
      "Object Oriented Design (OOD)",
      "Object-Oriented Programming",
      "OOPS",
      "Inventory Management",
      "Clean Coding",
      "Design Patterns",
      "SOLID Principles",
      "Extensibility"
    ]
  },
  {
    "serial_no": 144,
    "question_number": 1705,
    "title": "1705. Design a Scalable Engagement Tracking System for Campaign Links",
    "description": "You're tasked with designing a high-level architecture for an Engagement Tracking System that helps product vendors measure the performance of their campaigns across channels like email and SMS.\nRequirements:\n1. Vendor Onboarding\nVendors can register their products in the system along with metadata like product name, redirect URL, and associated campaign information.\n2. Campaign Management\nCampaigns can be sent to users via different mediums (email, SMS, etc.).\nEach campaign contains a trackable link that must be traceable to a specific vendor and product.\n3. User Engagement\nWhen a user receives a campaign and clicks on a link, the system must:\nLog the click event along with timestamp, user ID, campaign ID, channel, etc.\nRedirect the user seamlessly to the actual vendor product URL.\nOptionally track impressions, i.e., when the message is opened or seen (without click).\n4. Vendor Dashboard\nVendors can log into a dashboard where they see:\nTotal clicks per campaign\nUnique users engaged\nImpressions\nCTR (Click Through Rate)\nChannel-wise performance (email vs SMS)\nTime series analysis for click patterns\nConstraints:\nSystem must handle at least 100M clicks/day\nClick data must be visible on the dashboard within 5 minutes\nUptime SLA: 99.9%",
    "category": "System Design",
    "company": "ThoughtSpot",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-a-scalable-engagement-tracking-system-for-campaign-links/1705",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "High Scalability",
      "High Availability",
      "Streaming Data",
      "Analytics Engineering"
    ]
  },
  {
    "serial_no": 145,
    "question_number": 1723,
    "title": "1723. Design an IP Address Blocklist Service",
    "description": "Imagine you're building a service to protect a large-scale application like a social media platform or an e-commerce site from malicious actors. Your task is to design a highly efficient IP address blocklist system.\nThis service will be used by other parts of the infrastructure to quickly verify if an incoming request is from a blocked IP address.\nCore Features to Consider:\nBlocklist Check: The main function of the system is to provide a very fast way to check if a given IP is on the blocklist.\nAdmin Operations: Administrators need the ability to add and remove IP addresses (or even entire IP ranges) from the blocklist.\nTimed Blocks: The system should support temporary blocks. For example, an admin might want to block an IP for just 24 hours.\nKey System Goals:\nSpeed: The check for a blocked IP must be incredibly fast, with latency in the low milliseconds.\nScale: The system must be able to handle a massive number of checks per second and store a list of potentially billions of blocked IPs.\nReliability: The service needs to be highly available. If it goes down, the main application could be vulnerable.",
    "category": "System Design",
    "company": "Confluent",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-an-ip-address-blocklist-service/1723",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Scalability",
      "Caching",
      "Low Latency",
      "High Availability"
    ]
  },
  {
    "serial_no": 146,
    "question_number": 1753,
    "title": "1753. Scalable Friend-Count for Social Feed Posts",
    "description": "You are building a social media network (Facebook clone). Every post should display, next to the author’s name, the current number of friends that author has at the moment a viewer loads the post. The database schema is:\nUSER\nuser_id (PK)\nname\ncreated_date\nUSER_RELATIONSHIP\nfriendship_id (PK)\nuser_id (indexed)\nuser2_id (indexed)\nstart_date\nDesign a solution (focusing on the database and read/write trade-offs) that returns friend counts efficiently and scales to billions of users and relationships. Consider read-heavy feed traffic, friend adds/removes, and the requirement that the displayed count be up-to-date at view time (within reasonable latency).",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/scalable-friend-count-for-social-feed-posts/1753",
    "tags": [
      "System Design",
      "Databases",
      "Caching",
      "High Scalability",
      "Denormalization",
      "Precomputation",
      "Eventual Consistency",
      "Data Consistency",
      "High-Level Design (HLD)",
      "Karat Round"
    ]
  },
  {
    "serial_no": 147,
    "question_number": 1754,
    "title": "1754. Load Balancing Documents to Servers for Collaborative Editing",
    "description": "We are working on a clone of Google Docs. The software has the following features and limitations:\nMultiple users can edit the same document concurrently.\nEach document must be served by a single server at any time (all live edits for that doc go to that server).\nThere is a fixed pool of servers large enough for expected load.\nOur load balancer uses a round-robin system to permanently assign documents to each server, so that each will have an equal number of documents. Do you have any concerns about this load balancing system? In those cases, how would you fix the scalability issue?",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/load-balancing-documents-to-servers-for-collaborative-editing/1754",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "Load Balancer",
      "Sharding",
      "Fault Tolerance"
    ]
  },
  {
    "serial_no": 148,
    "question_number": 1755,
    "title": "1755. Choose Strong vs Eventual Consistency for Three Applications",
    "description": "For each of the following applications, choose whether strong consistency or eventual consistency is more appropriate, and justify your choice with the main reasons and consequences (latency, correctness, user experience).\nVideo metadata API: needs to respond within 20 ms and returns video metadata like author name, rating, and view count.\nWeb analytics platform: records every single click on a high-traffic web page.\nBanking system: handles deposits and payments to checking accounts.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/choose-strong-vs-eventual-consistency-for-three-applications/1755",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "Data Consistency"
    ]
  },
  {
    "serial_no": 149,
    "question_number": 1756,
    "title": "1756. Find Missing Request IDs from Large-Scale Production Logs",
    "description": "A bug caused many failed requests. You have:\nA database table containing all request IDs that should have succeeded (call it expected_ids).\nLog files from ~500 production servers that contain the request IDs that actually succeeded. Logs are large (terabytes), and may be stored across many machines.\nDesign an efficient process to compute the list of missing IDs (IDs present in expected_ids but not present in the success logs).",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/find-missing-request-ids-from-large-scale-production-logs/1756",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Distributed System",
      "Big Data",
      "Logs",
      "Map Reduce",
      "Logs Processing"
    ]
  },
  {
    "serial_no": 150,
    "question_number": 1761,
    "title": "1761. Employee Access Management - grant / revoke / get",
    "description": "Design and implement an Employee Access Management subsystem. This LLD exercise focuses on three primary operations that you have to implement and justify:\ngrant(employeeId, resourceId, permission, metadata) - grant the given permission on a resource to an employee.\nrevoke(employeeId, resourceId, permission) - revoke a previously granted permission.\nget(employeeId, resourceId) - return the effective set of permissions the employee currently has on the resource, including any metadata (who granted it, when it expires, source: direct grant vs role/group).\nKey Requirements\nCore operations\ngrant(employeeId, resourceId, permission, metadata):\nGrants a permission (e.g., read, write, admin) to an employee for a given resource.\nmetadata can include grantedBy, grantedAt, expiresAt (optional), reason.\nMultiple grants may exist for the same employee+resource (e.g., different permissions or overlapping grants).\nrevoke(employeeId, resourceId, permission):\nRemoves the specific permission. If the permission was granted multiple times (e.g., from a role and direct grant), the revoke should only remove the specified grant type.\nget(employeeId, resourceId):\nReturns the effective permission set for that employee on that resource (e.g., {read: true, write: false, admin: false}), and provenance information (source role, direct grant, expiry).\nExtensions\nSupport direct grants; design should allow easy extension to roles/groups and policy-based grants.\nHandle time-bound grants (expired grants must not be considered effective).\nRespect an order of precedence you define (e.g., explicit deny can override grants; role grants vs direct grants).",
    "category": "System Design",
    "company": "Rippling",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/employee-access-management-grant-revoke-get/1761",
    "tags": [
      "Low-Level Design (LLD)",
      "Concurrency",
      "API Design",
      "Security",
      "Data Modelling"
    ]
  },
  {
    "serial_no": 151,
    "question_number": 1762,
    "title": "1762. Design a Multi-Property Hotel Management & Reservation Platform",
    "description": "Design a comprehensive hotel management system similar to what companies like Marriott, Hilton, or Expedia would use. This system needs to handle the complete lifecycle of hotel operations from room inventory management to guest reservations and check-in/check-out processes.\nThe system should support multiple hotels within a chain, handle real-time room availability, process reservations, manage pricing, and provide analytics for hotel operators.\nFunctional Requirements\nProperty onboarding (hotels, room types, amenities, rate plans, taxes & fees).\nInventory & availability management (by property, room type, date range; allotments, blocks).\nReservation lifecycle (search → quote → hold → book → pay → modify/cancel → refund).",
    "category": "System Design",
    "company": "MakeMyTrip",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-a-multi-property-hotel-management-reservation-platform/1762",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "Distributed System",
      "High Scalability",
      "Concurrency",
      "Microservices",
      "API Design",
      "Idempotent",
      "Indexing",
      "Data Consistency"
    ]
  },
  {
    "serial_no": 152,
    "question_number": 1763,
    "title": "1763. Popular-K Feed Service for Confluence (Cross-Space Trending Content)",
    "description": "Design a “Popular-K” feed for Confluence that surfaces the top K most popular content items (pages, blog posts, comments) across one or more scopes (e.g., site-wide, by space, by owner team) and time windows (e.g., last 15 minutes, last 24 hours, last 7 days). The feature will appear on user dashboards and space home pages, updating near-real-time as engagement events stream in (views, likes/reactions, comments, shares). The system must be product-agnostic and extensible so additional Atlassian products (e.g., Jira issues, Bitbucket PRs) can contribute content and signals without a redesign.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/popular-k-feed-service-for-confluence-cross-space-trending-content/1763",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Top-K",
      "Streaming Data",
      "Caching",
      "Indexing",
      "Real-Time Systems",
      "Data Consistency",
      "Eventual Consistency",
      "Batch Processing",
      "Cron Jobs"
    ]
  },
  {
    "serial_no": 153,
    "question_number": 1777,
    "title": "1777. Explain the Database Schema for Your Project",
    "description": "Pick one of your projects and explain its database schema you designed and explain why.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-the-database-schema-for-your-project/1777",
    "tags": [
      "Database Design",
      "Database Schema",
      "Databases",
      "Indexing"
    ]
  },
  {
    "serial_no": 154,
    "question_number": 1778,
    "title": "1778. Understanding Database Normalization and Its Importance",
    "description": "Explain what database normalization is, why it is used, and the tradeoffs it introduces. Provide examples of anomalies that normalization can prevent (insertion, update, and deletion anomalies) and illustrate how applying normalization impacts schema design in a production environment.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/understanding-database-normalization-and-its-importance/1778",
    "tags": [
      "Database Design",
      "Database Schema",
      "Databases",
      "SQL",
      "MySQL",
      "Normalization",
      "Data Modelling"
    ]
  },
  {
    "serial_no": 155,
    "question_number": 1779,
    "title": "1779. Identifying and Using Primary and Composite Keys in Relational Databases",
    "description": "Describe the concepts of primary keys and composite keys in a relational database. Provide examples where a composite key is a better choice than a single-column primary key. Discuss potential pitfalls of improper key selection in large-scale systems.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/identifying-and-using-primary-and-composite-keys-in-relational-databases/1779",
    "tags": [
      "Databases",
      "Database Schema",
      "Database Design",
      "MySQL",
      "SQL"
    ]
  },
  {
    "serial_no": 156,
    "question_number": 1780,
    "title": "1780. Explaining the First Four Normal Forms with Examples",
    "description": "Define the first four normal forms (1NF, 2NF, 3NF, and BCNF). For each form, provide an example table that violates it, then demonstrate the steps to transform it into the correct form while preserving data integrity.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explaining-the-first-four-normal-forms-with-examples/1780",
    "tags": [
      "Databases",
      "Database Schema",
      "Database Design",
      "SQL",
      "MySQL",
      "Normalization",
      "First Normal Form (1NF)",
      "Second Normal Form (2NF)",
      "Third Normal Form (3NF)",
      "Boyce-Codd Normal Form (BCNF)"
    ]
  },
  {
    "serial_no": 157,
    "question_number": 1781,
    "title": "1781. Working with Foreign Keys and Cascade Operations",
    "description": "Explain what a foreign key is and how it enforces referential integrity. Discuss ON DELETE CASCADE and ON UPDATE CASCADE behaviors with practical examples. Highlight scenarios where cascading can be beneficial and where it could cause unintended data loss.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/working-with-foreign-keys-and-cascade-operations/1781",
    "tags": [
      "Databases",
      "Database Design",
      "Database Schema",
      "SQL",
      "MySQL",
      "Referential Integrity",
      "Cascade Delete",
      "Cascade Update",
      "Constraints"
    ]
  },
  {
    "serial_no": 158,
    "question_number": 1783,
    "title": "1783. Understanding of Static Variables and Static Methods in Object-Oriented Programming",
    "description": "Explain the concept of static variables and static methods. Show through code how they differ from instance variables and instance methods. Provide a scenario where using static members improves performance or design clarity, and another where it introduces maintainability issues.",
    "category": "System Design",
    "company": "Intuit",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/understanding-of-static-variables-and-static-methods-in-object-oriented-programming/1783",
    "tags": [
      "Low-Level Design (LLD)",
      "Singleton",
      "Object Oriented Design (OOD)",
      "Object-Oriented Programming",
      "System Design",
      "Static",
      "Class Design",
      "Clean Coding",
      "Extensibility",
      "Maintainability",
      "Static Methods",
      "Static Variables"
    ]
  },
  {
    "serial_no": 159,
    "question_number": 1795,
    "title": "1795. Multithreaded (Concurrent Writes Handling) Cache with Expiry and Automatic Cleanup",
    "description": "Design and implement a thread-safe in-memory cache that supports expiry of keys.\nThe cache should meet the following requirements:\nUser should be able to add a key-value pair (string, string) into the cache along with an expiry time in milliseconds.\nOnce a key expires, it should no longer be accessible.\nExpired keys should be automatically cleaned up in the background.\nThe cache should be thread-safe (multiple threads accessing/adding/removing keys simultaneously).\nAssume there is no maximum capacity (cache can grow infinitely).\nYou are expected to write working code (not pseudo-code) and handle synchronization properly.",
    "category": "System Design",
    "company": "Google",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/multithreaded-concurrent-writes-handling-cache-with-expiry-and-automatic-cleanup/1795",
    "tags": [
      "Multithreading",
      "Concurrency",
      "Thread Synchronization",
      "Caching",
      "Cache",
      "Synchronized",
      "Locking",
      "Renentrant Locks"
    ]
  },
  {
    "serial_no": 160,
    "question_number": 1798,
    "title": "1798. Applying CAP Theorem in a Real-world System",
    "description": "A ride-hailing platform (like Uber or Ola) wants to build a distributed system to match drivers and riders.\nThe system must handle millions of concurrent requests across different cities.\nSometimes, due to network partitions or failures, not all replicas may be available.\nAs an engineer, you are asked to decide which guarantees (Consistency, Availability, Partition Tolerance) are most important in this use case.\nDiscuss trade-offs if a user’s ride request shows a driver who is no longer available.\nWhich aspect would you prioritize for this system, and why?",
    "category": "System Design",
    "company": "Flexport",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/applying-cap-theorem-in-a-real-world-system/1798",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "Distributed System",
      "Data Consistency",
      "High Availability",
      "CAP Theorem",
      "Partition Tolerance",
      "Fault Tolerance"
    ]
  },
  {
    "serial_no": 161,
    "question_number": 1799,
    "title": "1799. Choosing the Right Database for E-commerce",
    "description": "You are designing the backend of an e-commerce platform where:\nProduct catalog contains millions of items with structured details (name, price, category, stock).\nUsers expect fast searches and filtering by category, price range, etc.\nThe system also needs to handle real-time order placement and inventory updates.\nExplain:\nWhich type of database (SQL, NoSQL, or hybrid) would you choose?\nJustify the choice.",
    "category": "System Design",
    "company": "Flexport",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/choosing-the-right-database-for-e-commerce/1799",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "Backend",
      "Database Design",
      "Distributed System",
      "High Scalability",
      "High Availability"
    ]
  },
  {
    "serial_no": 162,
    "question_number": 1800,
    "title": "1800. Ensuring Transaction Safety with ACID in a Banking Application",
    "description": "A banking application needs to support the following operation:\nA user transfers money from Account A to Account B.\nThe system must ensure that either the full transaction goes through, or none of it does.\nExplain how ACID properties (Atomicity, Consistency, Isolation, Durability) come into play in this scenario.\nWhat would go wrong if one of these guarantees is missing?\nHow would you ensure correctness in concurrent transactions where multiple users transfer money at the same time?",
    "category": "System Design",
    "company": "Confluent",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/ensuring-transaction-safety-with-acid-in-a-banking-application/1800",
    "tags": [
      "Backend",
      "Database Design",
      "Databases",
      "Database Schema",
      "Transaction",
      "ACID",
      "Data Consistency"
    ]
  },
  {
    "serial_no": 163,
    "question_number": 1801,
    "title": "1801. Explain the CAP Theorem",
    "description": "What is the CAP theorem in distributed systems?\nCan a system satisfy all three properties simultaneously?\nGive examples of when you would prioritize Consistency, Availability, or Partition Tolerance.",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-the-cap-theorem/1801",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "Backend",
      "CAP Theorem",
      "Data Consistency",
      "High Availability",
      "Partition Tolerance"
    ]
  },
  {
    "serial_no": 164,
    "question_number": 1802,
    "title": "1802. Choosing the Right Database",
    "description": "What factors would you consider while choosing between a SQL database and a NoSQL database?\nWhen would you prefer a relational database?\nWhen would you prefer a NoSQL database?\nCan you explain trade-offs between scalability, schema flexibility, query complexity, and transaction guarantees?",
    "category": "System Design",
    "company": "Confluent",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/choosing-the-right-database/1802",
    "tags": [
      "Database Design",
      "Databases",
      "System Design"
    ]
  },
  {
    "serial_no": 165,
    "question_number": 1822,
    "title": "1822. Design a Streaming Platform Like Netflix/Youtube/Hotstar/Prime Video",
    "description": "You are asked to design a video streaming platform similar to Netflix that allows millions of users worldwide to stream movies and TV shows on-demand. The system must handle a very large scale of users and ensure smooth playback;",
    "category": "System Design",
    "company": "Netflix",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-a-streaming-platform-like-netflix-youtube-hotstar-prime-video/1822",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "High Availability",
      "Caching",
      "Content Delivery Network (CDN)",
      "Distributed System",
      "Databases",
      "Netflix",
      "YouTube",
      "Hotstar"
    ]
  },
  {
    "serial_no": 166,
    "question_number": 1824,
    "title": "1824. API Design for a Notification System",
    "description": "Design the APIs for a Notification System similar to what large-scale platforms (Amazon, Microsoft, Google, Uber, etc.) use.\nThe system should allow services within the application to send notifications to users through multiple channels like Email, SMS, and Push Notifications. Users should also be able to view, manage, and mark their notifications as read/unread.\nYour task is to design RESTful APIs for the following requirements:\nSend Notification: Services within the system should be able to trigger a notification for a user or a group of users.\nGet Notifications: A user should be able to fetch all their notifications, with filters such as read/unread and pagination support.\nMark Notification Status: A user should be able to mark a notification as read/unread.",
    "category": "System Design",
    "company": "PayPay Corporation",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/api-design-for-a-notification-system/1824",
    "tags": [
      "System Design",
      "API Design",
      "Notification System",
      "REST"
    ]
  },
  {
    "serial_no": 167,
    "question_number": 1828,
    "title": "1828. What do you mean by Indexing in DBMS?",
    "description": "What do you mean by Indexing in DBMS?",
    "category": "System Design",
    "company": "D. E. Shaw & Co.",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/what-do-you-mean-by-indexing-in-dbms/1828",
    "tags": [
      "Databases",
      "Database Schema",
      "Database Design",
      "DBMS",
      "Relational Databases (RDBMS)",
      "Indexing"
    ]
  },
  {
    "serial_no": 168,
    "question_number": 1829,
    "title": "1829. Explain the different types of indexing in DBMS.",
    "description": "Explain the different types of indexing in DBMS.",
    "category": "System Design",
    "company": "D. E. Shaw & Co.",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-the-different-types-of-indexing-in-dbms/1829",
    "tags": [
      "Databases",
      "Database Design",
      "Database Schema",
      "DBMS",
      "Relational Databases (RDBMS)",
      "SQL",
      "NoSQL",
      "MySQL",
      "Indexing"
    ]
  },
  {
    "serial_no": 169,
    "question_number": 1841,
    "title": "1841. Movie Review Aggregator",
    "description": "You are asked to design a system that collects movie reviews from different sources and shows an overall score to users.\nRequirements:\nThe system should fetch reviews and ratings from multiple sources (for example, critic websites, audience platforms, blogs).\nRatings can come in different formats (like stars out of 5, scores out of 10, percentages). The system should convert them into a common format.\nFor each movie, show:\nThe average critic score\nThe average audience score\nAn overall combined score\nUsers should be able to:\nSearch for a movie by name\nView details of the movie along with the scores and reviews\nThe system should be able to handle updates, since reviews and ratings keep changing after release.\nConstraints to think about:\nThe system will have many more reads than writes.\nDuring peak movie releases, a lot of reviews may come in a short time.\nData from external sources may be delayed or unavailable sometimes.\nThe design should be scalable and reliable.\nFollow-up questions interviewer may ask:\nHow would you store and organize the data for movies, reviews, and scores?\nHow will you keep the overall score updated as new reviews arrive?\nHow would you make sure search is fast even if there are millions of movies?\nHow will the system behave if one of the external review sources is down?",
    "category": "System Design",
    "company": "Meta",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/movie-review-aggregator/1841",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Availability",
      "High Scalability"
    ]
  },
  {
    "serial_no": 170,
    "question_number": 1846,
    "title": "1846. Improve REST API",
    "description": "You are given a simple booking API and asked how you would improve it to make it more robust, secure, and production-ready.\nCurrent API:\nGET /booking?id=123\nPOST /booking\nProblems to identify and fix:\nNo authentication or authorization.\nNo proper request/response structure.\nError handling missing.\nNo clear status codes.\nYou are expected to suggest improvements like:\nAPI request/response structure (better REST design). Clear and consistent response format with proper HTTP status codes.\nAuthentication and authorization (e.g., OAuth, API keys, JWT tokens)\nBetter request body validation.\nRate limiting for security.",
    "category": "System Design",
    "company": "Agoda",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/improve-rest-api/1846",
    "tags": [
      "REST",
      "API Design",
      "Authentication",
      "Security",
      "HTTP",
      "Error Handling"
    ]
  },
  {
    "serial_no": 171,
    "question_number": 1847,
    "title": "1847. Review and Improve Booking API Code",
    "description": "You are given the following booking API implementation and asked to review it.\nCode given in interview:\nclass BookingService:\n    def book(self, booking_type):\n        if booking_type == \"hotel\":\n            print(\"Hotel booked\")\n        elif booking_type == \"flight\":\n            print(\"Flight booked\")\n        else:\n            print(\"Invalid booking type\")\nThings to look for and suggest:\nUse of Strategy Pattern instead of multiple if-else.\nBetter error and exception handling.\nClear separation of concerns.\nReturning proper values instead of printing inside the method.\nYou are expected to explain how you would refactor the code for better maintainability and extensibility.",
    "category": "System Design",
    "company": "Agoda",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/review-and-improve-booking-api-code/1847",
    "tags": [
      "API Design",
      "Code Review",
      "Design Patterns",
      "Strategy Design Pattern",
      "OOPS",
      "OOP",
      "Error Handling"
    ]
  },
  {
    "serial_no": 172,
    "question_number": 1848,
    "title": "1848. Concert Ticket Booking (Flash Sale Scenario)",
    "description": "You need to design a system for booking tickets to popular concerts. Sometimes, when sales open, thousands of users try to book at the same time, similar to a flash sale.\nRequirements:\nUsers should be able to search for concerts and see available seats.\nWhen booking starts, the system should handle very high traffic where many people are trying to grab tickets at once.\nA user should be able to select seats and confirm booking if they are available.\nOnce a seat is booked, it should not be allowed to be booked by anyone else.\nUsers should get clear confirmation or failure responses quickly.\nConstraints to think about:\nSystem should handle sudden spikes in traffic (for example, millions of requests in the first few minutes).\nThere should be no double-booking of the same seat.\nPayment and booking should be handled together so that tickets are not blocked without payment.\nThe system should work even if some services fail or slow down.\nReads (like checking seat availability) will be very high compared to confirmed bookings.\nFollow-up questions an interviewer may ask:\nHow would you prevent overselling tickets during peak traffic?\nHow will you design the flow for seat locking and payment?\nWhat database structure would you use for handling seat availability?\nHow will you scale the system for sudden traffic spikes?\nWhat caching strategy would you use for fast reads?",
    "category": "System Design",
    "company": "Meta",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/concert-ticket-booking-flash-sale-scenario/1848",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Movie Ticket Booking",
      "Concurrency",
      "Databases",
      "High Availability"
    ]
  },
  {
    "serial_no": 173,
    "question_number": 1853,
    "title": "1853. Active-Active vs Active-Passive Architecture",
    "description": "Explain how active-active and active-passive architectures work in system design. Describe the differences between the two, where each is commonly used, and the trade-offs involved.\nPoints to cover in your explanation:\nWhat happens during normal operation in both setups.\nHow failover or recovery works in case one server or data center goes down.\nPros and cons of active-active vs active-passive in terms of reliability, cost, complexity, and performance.\nReal-world examples where each approach would make sense.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/active-active-vs-active-passive-architecture/1853",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Availability",
      "Backend",
      "Fault Tolerance",
      "Reliability",
      "Distributed System"
    ]
  },
  {
    "serial_no": 174,
    "question_number": 1855,
    "title": "1855. What is A/B testing? How would you set up its infrastructure?",
    "description": "What is A/B testing? How would you set up its infrastructure?",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/what-is-a-b-testing-how-would-you-set-up-its-infrastructure/1855",
    "tags": [
      "A/B Experimentation",
      "Deployment",
      "System Design"
    ]
  },
  {
    "serial_no": 175,
    "question_number": 1856,
    "title": "1856. What is Canary Deployment?",
    "description": "Explain what a canary deployment is and how it is used in real systems.",
    "category": "System Design",
    "company": "Walmart Global Tech India",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/what-is-canary-deployment/1856",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "A/B Experimentation",
      "Reliability",
      "Deployment",
      "Deployment Strategies"
    ]
  },
  {
    "serial_no": 176,
    "question_number": 1872,
    "title": "1872. Reducing Server Farm Costs for a Mobile App",
    "description": "Design a system for a mobile application that allows children to upload their drawings which are then animated and integrated into interactive environments that can be downloaded later. The current system relies heavily on large server farms which results in very high operating costs. The task is to think about how the system can be redesigned or optimized to reduce these costs.\nThe requirements are:\nThe solution must ensure animations and interactive environments remain high quality.\nThe application should continue to support large numbers of users at the same time.\nThe system should handle both storage of uploaded drawings and compute heavy tasks of animation rendering.\nThe design should explore ways to reduce dependency on expensive server infrastructure.\nThe overall user experience should not be degraded while optimizing costs.",
    "category": "System Design",
    "company": "Splunk",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/reducing-server-farm-costs-for-a-mobile-app/1872",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Cost Optimization",
      "Infrastructure",
      "Caching",
      "High Scalability",
      "Karat Round"
    ]
  },
  {
    "serial_no": 177,
    "question_number": 1873,
    "title": "1873. Estimating Resource Costs for a Video Sharing App",
    "description": "You are asked to plan for next year’s resource requirements and cost estimation for a video sharing application that has become very popular. Millions of users are uploading videos, watching streams, and sharing content daily. The goal is to identify what information is needed to prepare a realistic estimate of infrastructure and operational costs for the upcoming year.\nThe requirements are:\nThe estimation should cover storage, compute, bandwidth, and content delivery requirements.\nThe design should consider the effect of user growth trends on system load.\nInformation about peak usage, average session length, and video size distribution should be accounted for.\nThe system should include metrics on encoding, transcoding, and caching costs.\nThe estimation should also capture operational overhead such as monitoring, scaling, and maintenance.",
    "category": "System Design",
    "company": "Splunk",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/estimating-resource-costs-for-a-video-sharing-app/1873",
    "tags": [
      "High-Level Design (HLD)",
      "High Scalability",
      "Caching",
      "Resiliency",
      "Cost Optimization",
      "Capacity Planning",
      "Resource Planning",
      "Data Storage",
      "Blob Storage"
    ]
  },
  {
    "serial_no": 178,
    "question_number": 1874,
    "title": "1874. Choosing Server Setup for Music Streaming Application",
    "description": "You are asked to evaluate how a music streaming application that supports playlists for different activities should be hosted. The application needs to serve many users who may stream songs at the same time. The decision is around whether to use one large dedicated server or multiple smaller servers. How would you evaluate the advantages and disadvantages of using multiple servers versus a single dedicated server for hosting a music streaming application that supports various playlists for different activities?\nThe requirements are:\nConsider how performance will be affected by both options.\nThink about availability and what happens if a server fails.\nDiscuss how easily the system can handle increasing numbers of users.\nEvaluate the costs involved in both approaches.\nSuggest how data consistency and user experience can be maintained in each setup.",
    "category": "System Design",
    "company": "Splunk",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/choosing-server-setup-for-music-streaming-application/1874",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Distributed System",
      "Music Streaming",
      "Streaming Data",
      "Cost Optimization",
      "Data Consistency",
      "Karat Round"
    ]
  },
  {
    "serial_no": 179,
    "question_number": 1875,
    "title": "1875. Concerns While Designing a Payment System for Entertainment Machines",
    "description": "What concerns might arise when designing a payment system for entertainment machines, where players use preloaded game cards and can recharge through cash or credit card, especially given plans to install the system on approximately 125,000 machines next year",
    "category": "System Design",
    "company": "Splunk",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/concerns-while-designing-a-payment-system-for-entertainment-machines/1875",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "High Scalability",
      "Reliability",
      "Payment System",
      "Karat Round"
    ]
  },
  {
    "serial_no": 180,
    "question_number": 1886,
    "title": "1886. Design a Simplified Google Docs Style Editor Frontend",
    "description": "You are asked to design and implement a simplified version of a Google Docs style text editor that runs in the browser. The editor should allow users to create and edit rich text documents with basic formatting.\nRequirements and Behavior\n1. Core Editing\nThe editor must allow typing, deleting, and selecting text.\nProvide basic formatting options such as bold, italic, underline, headings, and lists.\nSupport copy, paste, and cut operations within the editor.\n2. Toolbar and Controls\nA toolbar must be provided with buttons for each formatting action.\nWhen text is selected, applying formatting must update only the selected portion.\nThe toolbar must reflect the active state of formatting for the current cursor position.\n3. Undo and Redo\nSupport undo and redo actions through both toolbar buttons and keyboard shortcuts.\nMaintain a history of changes to enable step by step undo and redo.\n4. Document Structure\nEnsure that content preserves structure when formatting is applied.\nExample: Bold text inside a heading must keep both styles.\nGenerated HTML should be clean and predictable.\n5. Collaboration Basics\nSupport autosave of the document content in memory.\nAllow reloading the page without losing the latest changes.\nProvide a way to export content as plain text and as HTML.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/design-a-simplified-google-docs-style-editor-frontend/1886",
    "tags": [
      "Frontend",
      "Conflict-free Replicated Data Types (CRDTs)",
      "System Design - Frontend",
      "State Management",
      "Text Editor",
      "Javascript",
      "Connected Components",
      "UI Components"
    ]
  },
  {
    "serial_no": 181,
    "question_number": 1913,
    "title": "1913. Tell me about a time you made a technical recommendation/suggestion",
    "description": "In a project you worked on, you provided a technical suggestion that was later implemented by your team. This could be related to design, code improvement, performance optimization, or choice of technology.\nExplain the background of the situation, the problem you were addressing, what exactly you suggested, and how your team or stakeholders react. Was it accepted or rejected?",
    "category": "System Design",
    "company": "LinkedIn",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/tell-me-about-a-time-you-made-a-technical-recommendation-suggestion/1913",
    "tags": [
      "Leadership",
      "Behavioral",
      "Technical",
      "Decision-Making",
      "Situation Based",
      "Influence",
      "Collaboration",
      "STAR Method"
    ]
  },
  {
    "serial_no": 182,
    "question_number": 1914,
    "title": "1914. Intercepting and Denying Malicious Requests in a Social Network System",
    "description": "You are asked to design a system for a professional networking platform similar to Linkedin. The platform allows users to connect with each other, view profiles, send connection requests, post updates, and message each other. Since the system operates at a very large scale, it receives millions of requests every second.\nThe challenge is to build a system that can intercept malicious requests and deny them before they reach the main application. You can assume that a service named isMaliciousRequest is available which returns whether a given request is malicious or safe.\nThe requirements are:\nThe system should be able to process a very large volume of incoming requests with low latency.\nMalicious requests should be denied quickly without affecting safe traffic.\nThe design should work reliably even if one or more servers fail.\nThe system should scale as the number of users and requests increase over time.\nEnsure that the addition of this layer does not significantly degrade the user experience.\nProvide a way to monitor and log malicious activity for future analysis.\nThe design should also consider false positives and ensure genuine requests are not wrongly denied.",
    "category": "System Design",
    "company": "LinkedIn",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/intercepting-and-denying-malicious-requests-in-a-social-network-system/1914",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Backend",
      "Distributed System",
      "High Scalability",
      "Access Control",
      "Security",
      "Cloud Security"
    ]
  },
  {
    "serial_no": 183,
    "question_number": 1923,
    "title": "1923. Finding System Throughput with Multiple Components",
    "description": "You are given a document processing system with a pipeline consisting of multiple stages. Each stage (or component) has its own independent processing capacity. The stages are connected in series, meaning a document must pass through all stages to be fully processed.\nFor example:\nComponent A: can process 10 documents per second\nComponent B: can process 20 documents per second\nComponent C: can process 50 documents per second\nQuestion: What is the overall throughput of the system?\nConsiderations to Think About:\nHow throughput is impacted when components have different processing speeds.\nWhich component becomes the bottleneck of the system.\nHow queuing might occur between components.\nHow this would scale if new stages with different capacities are added in the pipeline.",
    "category": "System Design",
    "company": "Atlassian",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/finding-system-throughput-with-multiple-components/1923",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "High Scalability",
      "Throughput Analysis"
    ]
  },
  {
    "serial_no": 184,
    "question_number": 1938,
    "title": "1938. Real‑Time Risk Management Service for a Payments Platform",
    "description": "Design a high‑level architecture for a distributed risk management service that operates on a payments platform similar to Paytm. The service must ingest transaction streams in real time, evaluate each transaction for fraud or high‑risk indicators, and flag suspicious activity instantly.\nYour design should cover:\nThe overall distributed components and how they communicate.\nData storage choices and a schema that supports quick look‑ups and historical analysis.\nTechniques to achieve low latency and high throughput, including caching, partitioning, and query optimization.\nHow the system scales to handle peak loads and remains fault‑tolerant.\nAny additional considerations such as security, consistency models, and monitoring.",
    "category": "System Design",
    "company": "Paytm",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/real-time-risk-management-service-for-a-payments-platform/1938",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Distributed System",
      "Database Design",
      "Risk Management",
      "FinTech"
    ]
  },
  {
    "serial_no": 185,
    "question_number": 1950,
    "title": "1950. Code Review for a Pull Request",
    "description": "You will be presented with a pull request (PR) that includes a code change and a brief description of its purpose. Your task is to conduct a thorough code review.\nYour review should focus on identifying potential issues and suggesting improvements across several areas, including:\nDesign Principles: Does the code adhere to principles like SOLID?\nSecurity: Are there any vulnerabilities, such as SQL injection, cross site scripting, or potential for man in the middle attacks?\nBest Practices: Evaluate aspects like logging, error handling, and code cleanliness.\nConcurrency: Are there any potential race conditions or other multithreading issues?",
    "category": "System Design",
    "company": "JPMorgan Chase & Co.",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/code-review-for-a-pull-request/1950",
    "tags": [
      "Code Review",
      "Best Practices",
      "System Design Principles",
      "Security"
    ]
  },
  {
    "serial_no": 186,
    "question_number": 1966,
    "title": "1966. Database Design for a Multi-Stage Entity Management System",
    "description": "Design a database schema for a generic system that tracks entities as they move through a multi-stage process. The system needs to handle evaluations and results at each stage. Key requirements include:\nAn entity can go through a predefined sequence of stages.\nAt each stage, an entity can be evaluated multiple times (repeated attempts).\nEach attempt should record a specific outcome or result.\nThe design should be flexible enough to support tracking the history of all attempts and their outcomes over time for any given entity.",
    "category": "System Design",
    "company": "ServiceNow",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/database-design-for-a-multi-stage-entity-management-system/1966",
    "tags": [
      "Database Design",
      "Schema Design",
      "Data Modelling",
      "System Architect"
    ]
  },
  {
    "serial_no": 187,
    "question_number": 1969,
    "title": "1969. Explain Your Organization's User Authentication Workflow",
    "description": "Could you walk me through the user authentication and authorization process from a system you've previously worked on?\nPlease describe the complete end-to-end flow, starting from when a user attempts to log in until they are successfully granted access to protected resources.\nConsider discussing the following points:\nThe overall architecture (e.g., monolithic vs. microservice-based).\nThe technologies and protocols involved (like OAuth 2.0, JWT, SAML, or session cookies) and the reasons for choosing them.\nKey security measures implemented for handling credentials, managing sessions or tokens, and preventing common vulnerabilities.",
    "category": "System Design",
    "company": "Landmark Group",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-your-organization-s-user-authentication-workflow/1969",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Authentication",
      "Security",
      "Architecture"
    ]
  },
  {
    "serial_no": 188,
    "question_number": 1973,
    "title": "1973. Self-Assessment of Interview Performance",
    "description": "Reflecting on your previous interviews with us today, could you identify which round you found to be the most challenging or felt was your weakest performance? Please explain what made it difficult and what you learned from the experience.",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/self-assessment-of-interview-performance/1973",
    "tags": [
      "Behavioral",
      "Self-Awareness",
      "Communication",
      "Honesty"
    ]
  },
  {
    "serial_no": 189,
    "question_number": 1985,
    "title": "1985. Design a File Filtering System",
    "description": "Design a flexible file filtering system. This system should be able to process a collection of files and return a subset that matches specific criteria.\nThe core requirements are:\nThe system must support filtering files based on their size. For instance, it should be able to find all files greater than 10MB or less than 1KB.\nIt must also support filtering by file extension, such as finding all '.txt', '.pdf', or '.jpg' files.\nA key aspect of your design is extensibility. It should be straightforward to add new filtering rules in the future (e.g., filtering by creation date, file name pattern, etc.) with minimal changes to the existing system architecture.",
    "category": "System Design",
    "company": "Amazon",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-a-file-filtering-system/1985",
    "tags": [
      "Low-Level Design (LLD)",
      "Object Oriented Design (OOD)",
      "Design Patterns",
      "Extensibility",
      "API Design"
    ]
  },
  {
    "serial_no": 190,
    "question_number": 2002,
    "title": "2002. Explain the End-to-End Deployment Process for a Production Web Application",
    "description": "Describe the end-to-end process of deploying a web application to a production environment. Explain the roles of different components and services you would use, such as EC2 for compute, S3 for storage, RDS or another managed database, load balancers, and networking configurations. Also, touch upon observability aspects like monitoring and logging.",
    "category": "System Design",
    "company": "NxtWave",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-the-end-to-end-deployment-process-for-a-production-web-application/2002",
    "tags": [
      "System Design",
      "High-Level Design (HLD)",
      "DevOps",
      "Cloud Architecture"
    ]
  },
  {
    "serial_no": 191,
    "question_number": 2004,
    "title": "2004. Caching Strategies in Web Services (Django/FastAPI)",
    "description": "Imagine you are building a web service using a framework such as Django or FastAPI. To improve its performance and responsiveness, you decide to implement caching. Explain where you would strategically add caching within the service architecture. Describe the various layers or components where caching can be applied, and for each location, provide concrete examples of the type of data or content you would cache.",
    "category": "System Design",
    "company": "NxtWave",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/caching-strategies-in-web-services-django-fastapi/2004",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "Caching",
      "Performance Optimization"
    ]
  },
  {
    "serial_no": 192,
    "question_number": 2025,
    "title": "2025. Explain Core Web Vitals",
    "description": "What are Core Web Vitals? Name and briefly describe the three main metrics that constitute them and explain their importance in measuring user experience and for SEO.",
    "category": "System Design",
    "company": "EY",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-core-web-vitals/2025",
    "tags": [
      "Frontend",
      "Web Performance",
      "Core Web Vitals"
    ]
  },
  {
    "serial_no": 193,
    "question_number": 2039,
    "title": "2039. Explain useRef and useMemo Hooks in React",
    "description": "Explain the purpose and common use cases for the useRef and useMemo hooks in React. How do they help in optimizing functional components? Provide a simple example for each to illustrate its function.",
    "category": "System Design",
    "company": "Analyttica Datalab",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/explain-useref-and-usememo-hooks-in-react/2039",
    "tags": [
      "React Hooks",
      "useRef",
      "useMemo",
      "Performance Optimization",
      "React.Js",
      "Frontend"
    ]
  },
  {
    "serial_no": 194,
    "question_number": 2041,
    "title": "2041. Difference Between Fetch API and Axios",
    "description": "What are the key differences between using the native Fetch API and the Axios library for making HTTP requests in a JavaScript application? Discuss aspects like API design, error handling, request/response transformation, and browser compatibility.",
    "category": "System Design",
    "company": "Analyttica Datalab",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/difference-between-fetch-api-and-axios/2041",
    "tags": [
      "Javascript",
      "API",
      "fetch",
      "axios",
      "Networking",
      "HTTP"
    ]
  },
  {
    "serial_no": 195,
    "question_number": 2053,
    "title": "2053. Discuss the Disadvantages of React's Context API",
    "description": "While React's Context API is effective for preventing prop drilling, it is not always the ideal solution for all state management scenarios. What are some of the potential disadvantages or drawbacks of using the Context API, especially concerning performance and re-renders in large-scale applications?",
    "category": "System Design",
    "company": "Analyttica Datalab",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/discuss-the-disadvantages-of-react-s-context-api/2053",
    "tags": [
      "Context API",
      "State Management",
      "Performance Optimization",
      "React.Js",
      "Frontend"
    ]
  },
  {
    "serial_no": 196,
    "question_number": 2055,
    "title": "2055. Strategies to Avoid Unnecessary Re-renders in React",
    "description": "In React, unnecessary component re-renders can significantly impact application performance. Describe several key techniques and best practices to prevent or minimize these re-renders. Your answer should cover hooks like useMemo and useCallback, as well as higher-order components like React.memo.",
    "category": "System Design",
    "company": "Analyttica Datalab",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/strategies-to-avoid-unnecessary-re-renders-in-react/2055",
    "tags": [
      "Performance Optimization",
      "React Hooks",
      "Memoization",
      "React.Js",
      "DOM Rendering",
      "Client-Side Rendering (CSR)"
    ]
  },
  {
    "serial_no": 197,
    "question_number": 2070,
    "title": "2070. Lazy Loading in ORM",
    "description": "Explain what lazy loading means within the context of databases and Object-Relational Mappers (ORMs). Discuss scenarios where lazy loading is beneficial and situations where it might be detrimental to performance or application behavior.",
    "category": "System Design",
    "company": "NxtWave",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/lazy-loading-in-orm/2070",
    "tags": [
      "Databases",
      "ORM",
      "Django",
      "Lazy Loading",
      "Performance Optimization"
    ]
  },
  {
    "serial_no": 198,
    "question_number": 2073,
    "title": "2073. Understanding Celery and its Applications with Django",
    "description": "Describe Celery and its role in an application's architecture. Explain the common use cases and scenarios where integrating Celery with a Django application would be beneficial. Provide specific examples to illustrate your points.",
    "category": "System Design",
    "company": "NxtWave",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/understanding-celery-and-its-applications-with-django/2073",
    "tags": [
      "Django",
      "Celery",
      "Asynchronous Processing",
      "Background Tasks"
    ]
  },
  {
    "serial_no": 199,
    "question_number": 2076,
    "title": "2076. Synchronous vs. Asynchronous Execution",
    "description": "When designing a web API, how do you choose between synchronous and asynchronous execution paths for various operations? Explain the factors and criteria that influence your decision. Provide examples of scenarios where you would prefer one approach over the other, and discuss the trade-offs and implications of each choice.",
    "category": "System Design",
    "company": "NxtWave",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/synchronous-vs-asynchronous-execution/2076",
    "tags": [
      "Asynchronous Processing",
      "API Design",
      "System Architect",
      "Scalability",
      "Performance Optimization",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 200,
    "question_number": 2077,
    "title": "2077. Monitoring Metrics and Logs for SLOs",
    "description": "Describe the key metrics and logs you would monitor to ensure a system adheres to its defined latency and error budgets.",
    "category": "System Design",
    "company": "NxtWave",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/monitoring-metrics-and-logs-for-slos/2077",
    "tags": [
      "High-Level Design (HLD)",
      "Monitoring",
      "Alerting",
      "Latency",
      "Error Handling",
      "Service Level Objectives (SLO)",
      "Error Budget"
    ]
  },
  {
    "serial_no": 201,
    "question_number": 2089,
    "title": "2089. Design an E-commerce Platform (LLD)",
    "description": "Design the low-level class structure for a core part of an e-commerce platform. Your design should include identifying key entities like products, users, orders, and payment, along with their attributes, relationships, and essential functionalities. Focus on applying good object-oriented design principles and consider how common design patterns could be integrated to ensure extensibility and maintainability.",
    "category": "System Design",
    "company": "Info Edge India Ltd",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/design-an-e-commerce-platform-lld/2089",
    "tags": [
      "Low-Level Design (LLD)",
      "Object Oriented Design (OOD)",
      "E-Commerce",
      "API Design",
      "Design Patterns",
      "Object Modeling"
    ]
  },
  {
    "serial_no": 202,
    "question_number": 2090,
    "title": "2090. Horizontal Scaling vs. Vertical Scaling",
    "description": "Explain the concepts of horizontal scaling and vertical scaling in the context of system architecture. Discuss their advantages, disadvantages, and typical use cases. Which approach would you generally prefer for a highly scalable, distributed system, and why?",
    "category": "System Design",
    "company": "Info Edge India Ltd",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/horizontal-scaling-vs-vertical-scaling/2090",
    "tags": [
      "System Design",
      "Scalability",
      "Architecture",
      "Cloud Computing"
    ]
  },
  {
    "serial_no": 203,
    "question_number": 2106,
    "title": "2106. Android App Launch Optimization: Library Initialization",
    "description": "Describe different mechanisms and best practices for initializing libraries during Android application launch. How can you optimize the app launch time by strategically managing library initialization, especially for large applications with many dependencies?",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/android-app-launch-optimization-library-initialization/2106",
    "tags": [
      "Android Development",
      "Mobile Development",
      "Application Lifecycle",
      "Performance Optimization",
      "Libraries",
      "Initialization"
    ]
  },
  {
    "serial_no": 204,
    "question_number": 2107,
    "title": "2107. Identifying and Mitigating Memory Leaks in Android Applications",
    "description": "Explain common causes of memory leaks in Android applications. How do you identify, debug, and prevent memory leaks, particularly those related to Context, Views, and long-running operations? Discuss tools and techniques used for memory profiling in Android.",
    "category": "System Design",
    "company": "Microsoft",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/identifying-and-mitigating-memory-leaks-in-android-applications/2107",
    "tags": [
      "Android Development",
      "Mobile Development",
      "Memory Management",
      "debugging",
      "Performance",
      "Memory Leaks"
    ]
  },
  {
    "serial_no": 205,
    "question_number": 2133,
    "title": "2133. N+1 Problem in Hibernate",
    "description": "Explain the N+1 problem in the context of Hibernate or other Object-Relational Mappers (ORMs). Describe how it arises and discuss various strategies to mitigate it.",
    "category": "System Design",
    "company": "American Express",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/n-1-problem-in-hibernate/2133",
    "tags": [
      "Hibernate",
      "ORM",
      "N+1 Problem",
      "Databases",
      "Performance"
    ]
  },
  {
    "serial_no": 206,
    "question_number": 2218,
    "title": "2218. Document Type Parser Design",
    "description": "Design a system capable of parsing multiple document formats such as .txt, .csv, and .xml. The design should emphasize:\nExtensibility: easily add support for new file types without modifying existing code.\nError handling: detect malformed inputs and report meaningful errors without crashing.\nEfficiency: process files with minimal overhead and resource usage. Provide a class diagram or description of the main components, the interfaces they expose, and the design patterns you would apply (e.g., Strategy, Factory, Builder). Explain how the parsing workflow operates, how errors are propagated, and any considerations for performance and scalability.",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Easy",
    "url": "https://enginebogie.com/public/question/document-type-parser-design/2218",
    "tags": [
      "Low-Level Design (LLD)",
      "Design Patterns",
      "Document Parsing",
      "Object Oriented Design (OOD)"
    ]
  },
  {
    "serial_no": 207,
    "question_number": 2220,
    "title": "2220. Deployment Strategies",
    "description": "Discuss various deployment strategies for ensuring a smooth and reliable deployment process. Consider aspects like minimizing downtime, rollback mechanisms, and blue-green deployments.",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/deployment-strategies/2220",
    "tags": [
      "High-Level Design (HLD)",
      "Deployment Strategies",
      "CI/CD",
      "System Design"
    ]
  },
  {
    "serial_no": 208,
    "question_number": 2221,
    "title": "2221. Ensuring Data Consistency in Distributed Systems",
    "description": "Describe methods for ensuring data consistency in a distributed system. Discuss the challenges associated with maintaining consistency and outline approaches to mitigate those challenges.",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/ensuring-data-consistency-in-distributed-systems/2221",
    "tags": [
      "Distributed System",
      "Data Consistency",
      "High-Level Design (HLD)",
      "System Design"
    ]
  },
  {
    "serial_no": 209,
    "question_number": 2222,
    "title": "2222. Achieving High Availability",
    "description": "Discuss strategies and techniques for designing a high-availability system. Include considerations for redundancy, fault tolerance, and disaster recovery.",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Hard",
    "url": "https://enginebogie.com/public/question/achieving-high-availability/2222",
    "tags": [
      "High Availability",
      "System Design",
      "High-Level Design (HLD)"
    ]
  },
  {
    "serial_no": 210,
    "question_number": 2225,
    "title": "2225. Managing Dependencies in an AWS Lambda Function",
    "description": "Explain how you would manage dependencies within an AWS Lambda function. Discuss the approach for packaging third‑party libraries, handling versioning of those libraries, and preventing conflicts between dependencies or Lambda layers. Include considerations for the build and deployment pipeline, the Lambda deployment package size limit, and the impact on cold‑start latency and overall runtime performance.",
    "category": "System Design",
    "company": "Oracle",
    "difficulty": "Medium",
    "url": "https://enginebogie.com/public/question/managing-dependencies-in-an-aws-lambda-function/2225",
    "tags": [
      "High-Level Design (HLD)",
      "System Design",
      "AWS Lambda",
      "Dependencies"
    ]
  }
]