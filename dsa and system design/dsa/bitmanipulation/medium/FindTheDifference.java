package bitmanipulation.medium;

/**
 * LeetCode 389: Find the Difference
 * https://leetcode.com/problems/find-the-difference/
 *
 * Description:
 * Given two strings s and t, where t is generated by shuffling s and adding one
 * letter, find the added letter.
 * 
 * Example:
 * Input: s = "abcd", t = "abcde"
 * Output: "e"
 * Explanation: 'e' is the letter that was added.
 *
 * Constraints:
 * - 0 <= s.length <= 1000
 * - t.length == s.length + 1
 * - s and t consist of lowercase English letters
 * 
 * Follow-up:
 * 1. Can you solve it using bit manipulation?
 * 2. What if multiple letters were added?
 * 3. Can you optimize for very large strings?
 */
public class FindTheDifference {

    // Approach 1: Using XOR - O(n) time, O(1) space
    public char findTheDifference(String s, String t) {
        char result = 0;

        // XOR all characters in both strings
        for (char c : s.toCharArray()) {
            result ^= c;
        }
        for (char c : t.toCharArray()) {
            result ^= c;
        }

        return result;
    }

    // Approach 2: Using sum - O(n) time, O(1) space
    public char findTheDifferenceSum(String s, String t) {
        int sum = 0;

        // Add ASCII values of t and subtract ASCII values of s
        for (char c : t.toCharArray()) {
            sum += c;
        }
        for (char c : s.toCharArray()) {
            sum -= c;
        }

        return (char) sum;
    }

    // Approach 3: Using count array - O(n) time, O(1) space
    public char findTheDifferenceCount(String s, String t) {
        int[] count = new int[26];

        // Count characters in t
        for (char c : t.toCharArray()) {
            count[c - 'a']++;
        }

        // Subtract count for characters in s
        for (char c : s.toCharArray()) {
            count[c - 'a']--;
        }

        // Find the character with count 1
        for (int i = 0; i < 26; i++) {
            if (count[i] == 1) {
                return (char) (i + 'a');
            }
        }

        return ' '; // Should never reach here given constraints
    }

    // Approach 4: Using HashMap - O(n) time, O(1) space
    public char findTheDifferenceMap(String s, String t) {
        int[] map = new int[128];

        // Count characters in both strings
        for (char c : t.toCharArray()) {
            map[c]++;
        }
        for (char c : s.toCharArray()) {
            map[c]--;
        }

        // Find character with count 1
        for (int i = 0; i < 128; i++) {
            if (map[i] == 1) {
                return (char) i;
            }
        }

        return ' '; // Should never reach here given constraints
    }

    // Follow-up: Find multiple added letters
    public String findMultipleDifferences(String s, String t) {
        StringBuilder result = new StringBuilder();
        int[] count = new int[26];

        // Count characters in both strings
        for (char c : t.toCharArray()) {
            count[c - 'a']++;
        }
        for (char c : s.toCharArray()) {
            count[c - 'a']--;
        }

        // Find all characters with positive count
        for (int i = 0; i < 26; i++) {
            while (count[i] > 0) {
                result.append((char) (i + 'a'));
                count[i]--;
            }
        }

        return result.toString();
    }

    public static void main(String[] args) {
        FindTheDifference solution = new FindTheDifference();

        // Test Case 1: Normal case
        System.out.println("Test 1: " +
                solution.findTheDifference("abcd", "abcde")); // e

        // Test Case 2: Added letter at start
        System.out.println("Test 2: " +
                solution.findTheDifference("bcde", "abcde")); // a

        // Test Case 3: Empty string
        System.out.println("Test 3: " +
                solution.findTheDifference("", "y")); // y

        // Test Case 4: Same letter repeated
        System.out.println("Test 4: " +
                solution.findTheDifference("aa", "aaa")); // a

        // Test all approaches
        String[][] testCases = {
                { "abcd", "abcde" },
                { "bcde", "abcde" },
                { "", "y" },
                { "aa", "aaa" },
                { "zxy", "xzyx" }
        };

        System.out.println("\nTesting all approaches:");
        for (String[] test : testCases) {
            char result1 = solution.findTheDifference(test[0], test[1]);
            char result2 = solution.findTheDifferenceSum(test[0], test[1]);
            char result3 = solution.findTheDifferenceCount(test[0], test[1]);
            char result4 = solution.findTheDifferenceMap(test[0], test[1]);

            boolean consistent = result1 == result2 && result2 == result3 && result3 == result4;
            System.out.printf("Strings '%s', '%s': %c (consistent: %b)%n",
                    test[0], test[1], result1, consistent);
        }

        // Performance test
        System.out.println("\nPerformance test:");
        StringBuilder sb1 = new StringBuilder();
        StringBuilder sb2 = new StringBuilder();
        for (int i = 0; i < 1000; i++) {
            sb1.append((char) ('a' + (i % 26)));
            sb2.append((char) ('a' + (i % 26)));
        }
        sb2.append('z');

        String s = sb1.toString();
        String t = sb2.toString();

        long start;
        int iterations = 10000;

        start = System.currentTimeMillis();
        for (int i = 0; i < iterations; i++) {
            solution.findTheDifference(s, t);
        }
        System.out.println("XOR: " + (System.currentTimeMillis() - start) + "ms");

        start = System.currentTimeMillis();
        for (int i = 0; i < iterations; i++) {
            solution.findTheDifferenceSum(s, t);
        }
        System.out.println("Sum: " + (System.currentTimeMillis() - start) + "ms");

        start = System.currentTimeMillis();
        for (int i = 0; i < iterations; i++) {
            solution.findTheDifferenceCount(s, t);
        }
        System.out.println("Count: " + (System.currentTimeMillis() - start) + "ms");

        start = System.currentTimeMillis();
        for (int i = 0; i < iterations; i++) {
            solution.findTheDifferenceMap(s, t);
        }
        System.out.println("Map: " + (System.currentTimeMillis() - start) + "ms");

        // Test multiple differences
        System.out.println("\nMultiple differences test:");
        System.out.println("Test 1: " +
                solution.findMultipleDifferences("abc", "abcdef")); // def
        System.out.println("Test 2: " +
                solution.findMultipleDifferences("", "xyz")); // xyz
        System.out.println("Test 3: " +
                solution.findMultipleDifferences("aaa", "aaabbb")); // bbb
    }
}
